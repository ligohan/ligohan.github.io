<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShaiB</title>
  <icon>https://www.gravatar.com/avatar/508d3d7c5fdcf457a997edea271758cd</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.shaib.cn/"/>
  <updated>2018-05-11T09:05:20.621Z</updated>
  <id>http://blog.shaib.cn/</id>
  
  <author>
    <name>ligohan</name>
    <email>www.lijun07@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Elasticsearch】13.性能测试（esrally 安装和使用）</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/13.%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%88esrally%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/13.性能测试（esrally安装和使用）/</id>
    <published>2018-05-11T08:54:40.752Z</published>
    <updated>2018-05-11T09:05:20.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何进行压测"><a href="#如何进行压测" class="headerlink" title="如何进行压测"></a>如何进行压测</h2><ul><li>自己写代码，难以确保测试代码的专业性 <a href="https://github.com/danielfireman/esperf" target="_blank" rel="noopener">esperf</a> 和 <a href="https://github.com/logzio/elasticsearch-stress-test" target="_blank" rel="noopener">elasticsearch-stress-test</a></li><li>http 压测工具。es 对外暴露了 Restful API，因此所有的针对 http 协议的压测工具都可以用来测试 es，比如 JMeter、httpload等等。</li><li><strong>elastic 官方工具 esrally</strong></li></ul><h2 id="esrally-介绍"><a href="#esrally-介绍" class="headerlink" title="esrally 介绍"></a>esrally 介绍</h2><ul><li>esrally 是 elastic 官方开源的一款基于 python3 实现的针对 es 的压测工具，<a href="https://github.com/elastic/rally" target="_blank" rel="noopener">源码地址</a>。</li><li>esrally主要功能如下：<ul><li>自动创建、压测和销毁 es 集群</li><li>可分 es 版本管理压测数据和方案</li><li>完善的压测数据展示，支持不同压测之间的数据对比分析，也可以将数据存储到指定的es中进行二次分析</li><li>支持收集 JVM 详细信息，比如内存、GC等数据来定位性能问题</li></ul></li></ul><ul><li><a href="http://esrally.readthedocs.io/en/latest/quickstart.html" target="_blank" rel="noopener">官方文档</a></li></ul><h2 id="esrally-安装"><a href="#esrally-安装" class="headerlink" title="esrally 安装"></a>esrally 安装</h2><ul><li>环境要求<ul><li>Python 3.4+ 和 pip3</li><li>JDK 8</li><li>git 1.9+</li></ul></li></ul><ul><li><p><strong>安装 Python 和 pip3</strong></p><ol><li><a href="https://www.linuxidc.com/Linux/2016-04/129784.htm" target="_blank" rel="noopener">centOS7 安装 Python3.5</a></li><li><p>安装pip3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python34-setuptools</span><br><span class="line">easy_install-3.4 pip</span><br></pre></td></tr></table></figure></li><li><p>之后就可以使用pip3了,如：</p> <figure class="highlight plain"><figcaption><span>install numpy```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- **安装 git**</span><br><span class="line">    1. 安装编译git时需要的包</span><br></pre></td></tr></table></figure><p>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>yum install  gcc perl-ExtUtils-MakeMaker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. 删除已有的git</span><br></pre></td></tr></table></figure><p>yum remove git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 下载git源码</span><br></pre></td></tr></table></figure><p>cd /opt/setups ## 随意进入哪个目录，用来下载git使用<br>wget <a href="https://www.kernel.org/pub/software/scm/git/git-2.9.1.tar.gz" target="_blank" rel="noopener">https://www.kernel.org/pub/software/scm/git/git-2.9.1.tar.gz</a><br>tar xzf git-2.9.1.tar.gz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4. 编译安装</span><br></pre></td></tr></table></figure><p>cd git-2.9.1<br>./configure –prefix=/usr/program/git_2.9.1  ## 安装git的目录<br>make<br>make install</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5. 创建软连接</span><br></pre></td></tr></table></figure><p>ln -s /usr/program/git_2.9.1/bin/* /usr/bin/  ## 如果安装在/usr/local下系统环境变量无需要做软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6. 测试git</span><br></pre></td></tr></table></figure><p>git –version</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- **安装esrally**</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>pip3 install esrally<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 安装过程若报错```unable to execute &apos;gcc&apos;: No such file or directory``` ，执行如下命令</span><br></pre></td></tr></table></figure></p><p>$ yum list | grep gcc<br>$ sudo yum install -y gcc.x86_64<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首次配置</span><br></pre></td></tr></table></figure></p><p>esrally configure</p><h2 id="命令后将会检测你的环境，以及需要填写JAVA-HOME。"><a href="#命令后将会检测你的环境，以及需要填写JAVA-HOME。" class="headerlink" title="命令后将会检测你的环境，以及需要填写JAVA_HOME。"></a>命令后将会检测你的环境，以及需要填写JAVA_HOME。</h2><h2 id="查看JAVA-HOME路径"><a href="#查看JAVA-HOME路径" class="headerlink" title="查看JAVA_HOME路径"></a>查看JAVA_HOME路径</h2><p>[root@jun ~] ls -l /etc/alternatives/java<br>lrwxrwxrwx. 1 root root 72 4月   9 23:29 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64/jre/bin/java</p><h2 id="就是它了-usr-lib-jvm-java-1-8-0-openjdk-1-8-0-131-11-b12-el7-x86-64-jre"><a href="#就是它了-usr-lib-jvm-java-1-8-0-openjdk-1-8-0-131-11-b12-el7-x86-64-jre" class="headerlink" title="就是它了 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64/jre"></a>就是它了 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64/jre</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 启动esrally</span><br></pre></td></tr></table></figure><p>esrally list tracks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image](https://i.imgur.com/beHc3F8.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 相关术语</span><br><span class="line">- rally：汽车拉力赛，esrally 是将压测比作了汽车拉力赛，因此其中的很多术语都是从汽车拉力赛中借鉴来的</span><br><span class="line">- track：赛道，指压测用的数据和测试策略，[详细文档](http://esrally.readthedocs.io/en/latest/track.html)，esrally 自带的track都在 [github](https://github.com/elastic/rally-tracks) 上 ，有很多测试数据，比如 geonames geopoint logging nested 等，每个数据文件夹中的 README.md 中有详细的数据介绍，而 track.json 便是压测策略的定义文件。</span><br><span class="line">&gt; - track.json 文件说明</span><br><span class="line">&gt;      - data-url: 一个url地址，指明测试数据的下载根路径，与下方 indices 中的 documents 结合，可得到数据的下载地址。</span><br><span class="line">&gt;      - indices: 指定该track可以操作的索引，包括创建、更新、删除等操作。详细信息可以参见这里。</span><br><span class="line">&gt;      - operations: 指定具体的操作，比如 index 索引数据的操作、force-merge 强制合并segment的操作、search 搜索的操作等等。具体例子可以看下面的示例。详细信息可以参见这里。</span><br><span class="line">&gt;      - challenges: 通过组合 operations 定义一系列 task ，再组合成一个压测的流程，请参照下方的 例子。详细信息可以参见[这里](http://esrally.readthedocs.io/en/latest/track.html#challenges)。</span><br><span class="line"></span><br><span class="line">&gt; challenges/default.json 中的一个定义如下：</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>{<br>      “name”: “append-no-conflicts”,<br>      “description”: “”,<br>      “default”: true,<br>      “index-settings”: {<br>        “index.number_of_replicas”: 0<br>      },<br>      “schedule”: [<br>        {<br>          “operation”: “index-append”,<br>          “warmup-time-period”: 240,<br>          “clients”: 8<br>        },<br>        {<br>          “operation”: “force-merge”,<br>          “clients”: 1<br>        },<br>    ···<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这里定义了一个名为 append-no-conflicts 的 challenge。</span><br><span class="line">&gt; 由于每次压测只能运行一个challenge，这里的 default 参数是指当压测未指定时默认运行的 challenge。</span><br><span class="line">&gt; schedule 中指定了该 challenge 中按顺序执行 index-append、force-merge、index-stats 等 9 个task，除此之外还可以设定 clients （并发客户端数）、warmup-iterations（预热的循环次数）、iterations（operation 执行的循环次数）等，详情请参见此处。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 通过下面的命令可以查看当前 esrally 可以使用的track。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>esrally list tracks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- car：赛车，指不同配置的 es 实例</span><br><span class="line">&gt;通过下面的命令可以查看 esrally 当前可用的 car。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>esrally list cars<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; cars 配置位于 rally 目录(mac默认是 ~/.rally)中 benchmarks/teams/default/cars/ 下面。具体配置可以参见 [cars 的文档](http://esrally.readthedocs.io/en/latest/car.html)，除了 heap 的配置，所有的 es 配置都可以修改。</span><br><span class="line">- race：比赛，指某一次压测。如果不指定赛车，就用 default 配置，如果不指定赛道，则默认使用 geonames track。</span><br><span class="line">&gt; 通过下面的命令来执行一次 race。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>esrally race –track=logging –challenge=append-no-conflicts –car=”4gheap”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 指定使用 logging 的track，运行该 track 中的 append-no-conflicts 的 challenge，指定的 car 为 4gheap 的 es 实例，详情见 [race 的文档](http://esrally.readthedocs.io/en/latest/race.html)</span><br><span class="line">- Tournament：锦标赛，由多个 race 组成</span><br><span class="line">&gt; 通过下面的命令可以查看所有的 race。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>esrally list races<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Recent races:</p><p>Race Timestamp    Track    Challenge            Car       User Tag</p><hr><p>20160518T122341Z  pmc      append-no-conflicts  defaults  intention:reduce_alloc_1234<br>20160518T112057Z  pmc      append-no-conflicts  defaults  intention:baseline_github_1234<br>20160518T101957Z  pmc      append-no-conflicts  defaults<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 当有了多个 race 后，可以通过下面的命令方便地比较不同 race 之间的数据。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>esrally compare –baseline=20160518T112057Z –contender=20160518T112341Z<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Pipeline：压测的一个流程</span><br><span class="line">&gt; 通过下面的命令可以查看已有的pipeline。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>esrally list pipeline<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Name                     Description</p><hr><p>from-sources-complete    Builds and provisions Elasticsearch, runs a benchmark and reports results.<br>from-sources-skip-build  Provisions Elasticsearch (skips the build), runs a benchmark and reports results.<br>from-distribution        Downloads an Elasticsearch distribution, provisions it, runs a benchmark and reports results.<br>benchmark-only           Assumes an already running Elasticsearch instance, runs a benchmark and reports results<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; - from-sources-complete：是从源代码编译 es 后再运行，可以通过 --revision 参数指明要编译的commit hash ，这样就可以针对某一个提交版本就行测试了。</span><br><span class="line">&gt; - from-sources-skip-build：如果已经编译好了，使用该 pipeline，可以跳过编译的流程，节省测试时间</span><br><span class="line">&gt; - from-distribution：通过 --distribution-version 指定 es 版本，esrally 会从官网直接下载该版本的可执行文件，然后进行测试。</span><br><span class="line">&gt; - **benchmark-only**：将 es 集群的管理交由用户来处理， esrally 只做压测。如果你想针对已有集群进行测试，那么要将pipeline设定为该模式。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 详细信息见 [pipeline 的文档](http://esrally.readthedocs.io/en/latest/pipelines.html)</span><br><span class="line"></span><br><span class="line">## 压测流程</span><br><span class="line">1. 根据参数设定自行编译或者下载 es 可执行实例，然后根据 car 的约定，创建并启动 es 集群。如果使用 benchmark-only 的pipeline，则该步骤省略。</span><br><span class="line">2. 根据指定 track 去下载数据，然后按照指定的 challenge 进行操作。</span><br><span class="line">3. 记录并输出压测结果数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 压测结果分析</span><br><span class="line">- 压测结束后，esrally 会将结果输出到终端和结果文件（位于 esrally 目录logs 和 benchmarks/races）中</span><br><span class="line">![image](https://segmentfault.com/img/remote/1460000011174702)</span><br><span class="line">- 在 Metric 一栏，有非常多的指标数据，详细的解释可以参见[该文档]()。一般要关注的数据有：</span><br><span class="line">    - throughput：每个操作的吞吐量，比如 index、search等</span><br><span class="line">    - latency：每个操作的响应时长数据</span><br><span class="line">    - Heap used for x：记录堆栈的使用情况</span><br><span class="line">- 每一次压测都会以压测时的时间命名，比如 logs/rally_out_20170822T082858Z.log </span><br><span class="line">- 在 benchmarks/races/2017-08-22-08-28-58 中记录着最终的结果和 es 的运行日志</span><br><span class="line">- 对于 benchmark-only 模式的测试，即针对已有集群的压力测试，也**可以通过安装 X-Pack Basic 版本进行监控（Monitoring）**，在压测的过程中就能查看相关指标。</span><br><span class="line">- esrally 可以在配置的时候指定将所有的 race 压测结果数据存入一个指定的 es 实例中，配置如下(在 esrally 目录中 rally.ini 文件中)：</span><br></pre></td></tr></table></figure></p></blockquote><p>vim /root/.rally/rally.ini</p><h2 id="修改以下数据"><a href="#修改以下数据" class="headerlink" title="修改以下数据"></a>修改以下数据</h2><p>[reporting]<br>datastore.type = elasticsearch<br>datastore.host = localhost<br>datastore.port = 9200<br>datastore.secure = False<br>datastore.user =<br>datastore.password =<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- esrally 会将数据存储在如下 3 个index中，下面 * 代指月份，即按月存储结果数据。</span><br><span class="line">    - rally-metrics-* 该索引分指标记录每次 race 的结果，如下图所示为某一次race的所有 metric 数据。</span><br><span class="line"></span><br><span class="line">![image](https://segmentfault.com/img/remote/1460000011174705)</span><br><span class="line">- 第一列时间是指某一次压测的时间</span><br><span class="line">- 第二列时间是指标采集的时间</span><br><span class="line">- 第三列 operation 指具体执行的操作</span><br><span class="line">- operation 为空的指标都是总计类的，比如indexing total time 记录的是总索引数据的时间、segments_count 是总段数等等</span><br><span class="line">- 其他的 operation 都记录了每一个操作的数据。需要注意的是，这里记录的是 operation 的所有采样数据，不是一个最终的汇总数据。上面截图中也可以看出同一个 hour_agg 的operation 有多项名为 service_time 的指标数据，但他们的采集时间是不同的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 实战</span><br><span class="line">### 测试已有集群的性能</span><br></pre></td></tr></table></figure></p><p>esrally race –pipeline=benchmark-only –target-hosts=127.0.0.1:9200 –cluster-health=yellow –track=nyc_taxis –challenge=append-no-conflicts</p><h2 id="–cluster-health-yellow-默认-esrally-会检查集群状态，非-green-状态会直接退出。添加该参数可以避免该情况"><a href="#–cluster-health-yellow-默认-esrally-会检查集群状态，非-green-状态会直接退出。添加该参数可以避免该情况" class="headerlink" title="–cluster-health=yellow 默认 esrally 会检查集群状态，非 green 状态会直接退出。添加该参数可以避免该情况"></a>–cluster-health=yellow 默认 esrally 会检查集群状态，非 green 状态会直接退出。添加该参数可以避免该情况</h2><p><code>`</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000011174694" target="_blank" rel="noopener">Elasticsearch 压测方案之 esrally 简介</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何进行压测&quot;&gt;&lt;a href=&quot;#如何进行压测&quot; class=&quot;headerlink&quot; title=&quot;如何进行压测&quot;&gt;&lt;/a&gt;如何进行压测&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;自己写代码，难以确保测试代码的专业性 &lt;a href=&quot;https://github.com/d
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
      <category term="esrally" scheme="http://blog.shaib.cn/tags/esrally/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】12.集群监控</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/12.%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/12.集群监控/</id>
    <published>2018-05-11T08:54:40.748Z</published>
    <updated>2018-05-11T09:04:54.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集群健康"><a href="#集群健康" class="headerlink" title="集群健康"></a>集群健康</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cluster/health</span><br></pre></td></tr></table></figure><ul><li><p>返回数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;cluster_name&quot;: &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;status&quot;: &quot;green&quot;,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;number_of_nodes&quot;: 2,  ## 集群节点数</span><br><span class="line">  &quot;number_of_data_nodes&quot;: 2,  ## 数据节点数量</span><br><span class="line">  &quot;active_primary_shards&quot;: 31,  ## 主分片数量</span><br><span class="line">  &quot;active_shards&quot;: 57,  ## 可用的分片数量</span><br><span class="line">  &quot;relocating_shards&quot;: 0,  ## 正在重新分配的分片数量，在新加或者减少节点的时候会发生</span><br><span class="line">  &quot;initializing_shards&quot;: 0,  ## 正在初始化的分片数量，新建索引或者刚启动会存在，时间很短</span><br><span class="line">  &quot;unassigned_shards&quot;: 0,  ## 没有分配的分片，一般就是那些名存实不存的副本分片</span><br><span class="line">  &quot;delayed_unassigned_shards&quot;: 0,</span><br><span class="line">  &quot;number_of_pending_tasks&quot;: 0,</span><br><span class="line">  &quot;number_of_in_flight_fetch&quot;: 0,</span><br><span class="line">  &quot;task_max_waiting_in_queue_millis&quot;: 0,</span><br><span class="line">  &quot;active_shards_percent_as_number&quot;: 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>status</strong>：集群状态</p></li></ul><table><thead><tr><th>Status</th><th>含义</th></tr></thead><tbody><tr><td>green</td><td>所有的主分片和副本分片都已分配。你的集群是 100% 可用的。</td></tr><tr><td>yellow</td><td>有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。</td></tr><tr><td>red</td><td>至少一个主分片以及它的全部副本都在缺失中。搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</td></tr></tbody></table><ul><li><p>索引级别集群状态，可以细致查看到底是哪个索引引起集群的故障的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cluster/health?level=indices</span><br></pre></td></tr></table></figure></li><li><p>分片级别集群状态，可以细致查看到底是哪个分片引起的集群故障</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cluster/health?level=shards</span><br></pre></td></tr></table></figure></li><li><p>阻塞查看集群状态，适用于自动化脚本。当状态变为指定状态或者更好就返回继续执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cluster/health?wait_for_status=yellow</span><br></pre></td></tr></table></figure></li></ul><h2 id="集群统计信息"><a href="#集群统计信息" class="headerlink" title="集群统计信息"></a>集群统计信息</h2><ul><li><p>索引级别的统计信息，比节点级别的统计信息详细。但是并不很实用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_stats  ## 统计 my_index 索引</span><br><span class="line">GET my_index,another_index/_stats  ## 使用逗号分隔索引名可以请求多个索引统计值</span><br><span class="line">GET _all/_stats  ## 请求全部索引的统计值</span><br></pre></td></tr></table></figure></li><li><p>节点级别状态信息，各部分节点数据的解释请参看<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_monitoring_individual_nodes.html" target="_blank" rel="noopener">网址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _nodes/stats</span><br></pre></td></tr></table></figure></li><li><p>集群所有统计信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl _cluster/stats</span><br></pre></td></tr></table></figure></li><li><p>较为有用的指标：</p><ul><li>nodes.successful</li><li>nodes.failed</li><li>nodes.total</li><li>nodes.mem.used_percent</li><li>nodes.process.cpu.percent</li><li>nodes.jvm.mem.heap_used</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;集群健康&quot;&gt;&lt;a href=&quot;#集群健康&quot; class=&quot;headerlink&quot; title=&quot;集群健康&quot;&gt;&lt;/a&gt;集群健康&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】11.线上部署优化</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/11.%E7%BA%BF%E4%B8%8A%E9%83%A8%E7%BD%B2%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/11.线上部署优化/</id>
    <published>2018-05-11T08:54:40.743Z</published>
    <updated>2018-05-11T09:04:37.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置JVM-HEAP-MAP"><a href="#配置JVM-HEAP-MAP" class="headerlink" title="配置JVM HEAP MAP"></a>配置JVM HEAP MAP</h2><ul><li>修改 /config/jvm.options<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms4g</span><br><span class="line">-Xmx4g</span><br></pre></td></tr></table></figure></li></ul><h2 id="最大内存不要超过32G"><a href="#最大内存不要超过32G" class="headerlink" title="最大内存不要超过32G"></a>最大内存不要超过32G</h2><pre><code>- [官方说明](https://www.elastic.co/guide/cn/elasticsearch/guide/current/heap-sizing.html)</code></pre><h2 id="禁止内存交互"><a href="#禁止内存交互" class="headerlink" title="禁止内存交互"></a>禁止内存交互</h2><ul><li>防止elasticsearch进程的内存被交换到磁盘，引起性能的急剧下降</li><li><p>将config/elasticsearch.yml中的bootstrap.mlockall项设为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.memory_lock true</span><br></pre></td></tr></table></figure></li><li><p>设置好之后，用下面的命令检查返回的mlockall设置项是否为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/_nodes/process?pretty</span><br></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/tG6jz9X.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="修改系统允许的最大文件打开数"><a href="#修改系统允许的最大文件打开数" class="headerlink" title="修改系统允许的最大文件打开数"></a>修改系统允许的最大文件打开数</h2><ul><li>使用下面命令然后查看open file的数字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -a</span><br></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/tqwrqI8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>将最大文件打开数调整为20480<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/security/limits.conf</span><br><span class="line">&quot;&quot;</span><br><span class="line">*   soft nofile   20480</span><br><span class="line">*   hard nofile   20480</span><br><span class="line">&quot;&quot;</span><br><span class="line"></span><br><span class="line">$ sudo reboot -h now</span><br></pre></td></tr></table></figure></li></ul><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &quot;localhost:9200/_cache/clear&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置JVM-HEAP-MAP&quot;&gt;&lt;a href=&quot;#配置JVM-HEAP-MAP&quot; class=&quot;headerlink&quot; title=&quot;配置JVM HEAP MAP&quot;&gt;&lt;/a&gt;配置JVM HEAP MAP&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;修改 /config/jvm.o
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】10.多表 Join (6.x 新类型)</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/10.%E5%A4%9A%E8%A1%A8Join%EF%BC%886.x%E6%96%B0%E7%B1%BB%E5%9E%8B%EF%BC%89/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/10.多表Join（6.x新类型）/</id>
    <published>2018-05-11T08:54:40.739Z</published>
    <updated>2018-05-11T09:04:28.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><ul><li>Mysql中多表关联，我们可以通过 left join 或者 Join 等实现；</li><li>ES5.X版本，借助父子文档实现多表关联，类似数据库中 Join 的功能；实现的核心是借助于ES5.X支持1个索引(index)下多个类型(type)。</li><li>ES6.X版本，每个索引下面只支持单一的类型（type）。</li></ul><h2 id="Join-类型介绍"><a href="#Join-类型介绍" class="headerlink" title="Join 类型介绍"></a>Join 类型介绍</h2><ul><li>仍然是一个索引下，借助父子关系，实现类似Mysql中多表关联的操作。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>Mapping定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT my_join_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_join_field&quot;: &#123;   ## join 的名称</span><br><span class="line">          &quot;type&quot;: &quot;join&quot;,</span><br><span class="line">          &quot;relations&quot;: &#123;</span><br><span class="line">            &quot;question&quot;: &quot;answer&quot;  ## 意为 qustion 为 answer 的父类</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义父文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my_join_index/_doc/1?refresh</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;This is a question&quot;,</span><br><span class="line">  &quot;my_join_field&quot;: &quot;question&quot; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_join_index/_doc/2?refresh</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;This is another question&quot;,</span><br><span class="line">  &quot;my_join_field&quot;: &quot;question&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义子文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT my_join_index/_doc/3?routing=1&amp;refresh  ## 路由值是强制性的，因为父文件和子文件必须在相同的分片上建立索引</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;This is an answer&quot;,</span><br><span class="line">  &quot;my_join_field&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;answer&quot;,   ## &quot;answer&quot;是此子文档的加入名称</span><br><span class="line">    &quot;parent&quot;: &quot;1&quot;   ## 指定此子文档的父文档ID：1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_join_index/_doc/4?routing=1&amp;refresh</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;This is another answer&quot;,</span><br><span class="line">  &quot;my_join_field&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;answer&quot;,</span><br><span class="line">    &quot;parent&quot;: &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ol><li>每个索引只允许一个Join类型Mapping定义；</li><li>父文档和子文档必须在同一个分片上编入索引；这意味着，当进行删除、更新、查找子文档时候需要提供相同的路由值。</li><li>一个文档可以有多个子文档，但只能有一个父文档。</li><li>可以为已经存在的Join类型添加新的关系。</li><li>当一个文档已经成为父文档后，可以为该文档添加子文档。</li></ol><h2 id="检索与聚合"><a href="#检索与聚合" class="headerlink" title="检索与聚合"></a>检索与聚合</h2><h4 id="基于父文档查找子文档"><a href="#基于父文档查找子文档" class="headerlink" title="基于父文档查找子文档"></a>基于父文档查找子文档</h4><h5 id="parent-id-根据父文档ID查询"><a href="#parent-id-根据父文档ID查询" class="headerlink" title="parent_id 根据父文档ID查询"></a>parent_id 根据父文档ID查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET my_join_index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;parent_id&quot;: &#123; </span><br><span class="line">            &quot;type&quot;: &quot;answer&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;1&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="has-parent查询"><a href="#has-parent查询" class="headerlink" title="has_parent查询"></a>has_parent查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET my_join_index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;has_parent&quot; : &#123;</span><br><span class="line">            &quot;parent_type&quot; : &quot;question&quot;,</span><br><span class="line">            &quot;query&quot; : &#123;</span><br><span class="line">                &quot;match&quot; : &#123;</span><br><span class="line">                    &quot;text&quot; : &quot;This is&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 90,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my_join_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_routing&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;text&quot;: &quot;This is an answer&quot;,</span><br><span class="line">          &quot;my_join_field&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;answer&quot;,</span><br><span class="line">            &quot;parent&quot;: &quot;1&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my_join_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_routing&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;text&quot;: &quot;This is another answer&quot;,</span><br><span class="line">          &quot;my_join_field&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;answer&quot;,</span><br><span class="line">            &quot;parent&quot;: &quot;1&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="基于子文档查找父文档"><a href="#基于子文档查找父文档" class="headerlink" title="基于子文档查找父文档"></a>基于子文档查找父文档</h4><h5 id="has-child-查询"><a href="#has-child-查询" class="headerlink" title="has_child 查询"></a>has_child 查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET my_join_index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;has_child&quot; : &#123;</span><br><span class="line">            &quot;type&quot; : &quot;answer&quot;,</span><br><span class="line">            &quot;query&quot; : &#123;</span><br><span class="line">                &quot;match&quot; : &#123;</span><br><span class="line">                    &quot;text&quot; : &quot;This is question&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 24,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my_join_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;text&quot;: &quot;This is a question&quot;,</span><br><span class="line">          &quot;my_join_field&quot;: &quot;question&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET my_join_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;parent_id&quot;: &#123;   ## parent_id是特定的检索方式，用于检索属于特定父文档id=1的，子文档类型为answer的文档的个数</span><br><span class="line">      &quot;type&quot;: &quot;answer&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;parents&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;my_join_field#question&quot;,   ## 基于父文档类型question进行聚合</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;script_fields&quot;: &#123;</span><br><span class="line">    &quot;parent&quot;: &#123;</span><br><span class="line">      &quot;script&quot;: &#123;</span><br><span class="line">         &quot;source&quot;: &quot;doc[&apos;my_join_field#question&apos;]&quot;   ## 在搜索结果添加一个 parent 字段，值为 my_join_field#question</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><h4 id="一对多定义"><a href="#一对多定义" class="headerlink" title="一对多定义"></a>一对多定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT join_ext_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_join_field&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;join&quot;,</span><br><span class="line">          &quot;relations&quot;: &#123;</span><br><span class="line">            &quot;question&quot;: [&quot;answer&quot;, &quot;comment&quot;]  </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一对多对多定义"><a href="#一对多对多定义" class="headerlink" title="一对多对多定义"></a>一对多对多定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT join_multi_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_join_field&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;join&quot;,</span><br><span class="line">          &quot;relations&quot;: &#123;</span><br><span class="line">            &quot;question&quot;: [&quot;answer&quot;, &quot;comment&quot;],  </span><br><span class="line">            &quot;answer&quot;: &quot;vote&quot; </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 图解</span><br><span class="line">   question</span><br><span class="line">    /    \</span><br><span class="line">   /      \</span><br><span class="line">comment  answer</span><br><span class="line">           |</span><br><span class="line">           |</span><br><span class="line">          vote</span><br></pre></td></tr></table></figure><ul><li>孙子文档导入数据.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT join_multi_index/_doc/3?routing=1&amp;refresh </span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;This is a vote&quot;,</span><br><span class="line">  &quot;my_join_field&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;vote&quot;,</span><br><span class="line">    &quot;parent&quot;: &quot;2&quot; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/AJJj2Inia15ixxb3nYPr7Q" target="_blank" rel="noopener">Elasticsearch 6.X 新类型Join深入详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;产生背景&quot;&gt;&lt;a href=&quot;#产生背景&quot; class=&quot;headerlink&quot; title=&quot;产生背景&quot;&gt;&lt;/a&gt;产生背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Mysql中多表关联，我们可以通过 left join 或者 Join 等实现；&lt;/li&gt;
&lt;li&gt;ES5.X版
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】9.深度分页</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/9.%E6%B7%B1%E5%BA%A6%E5%88%86%E9%A1%B5/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/9.深度分页/</id>
    <published>2018-05-11T08:54:40.734Z</published>
    <updated>2018-05-11T09:04:28.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是深分页问题？"><a href="#什么是深分页问题？" class="headerlink" title="什么是深分页问题？"></a>什么是深分页问题？</h2><ul><li><p>如果想查询第5000-5100条数据，发送如下查询条件就可以做到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST auditlog_operation/operlog/_search</span><br><span class="line">&#123;</span><br><span class="line">“from”:5000 //from：定义从哪里开始拿数据</span><br><span class="line">“size”:100 //size：定义一共拿多少条数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询流程如下：</p><ol><li>客户端发送请求到某个node节点。</li><li>此node将请求广播到各分片，各分片各自查询前5100条数据。</li><li>查询结果返回给node节点，node对结果进行合并整合，取出前5100条数据。</li><li>返回给客户端。</li></ol></li></ul><ul><li>这样的查询在10000-50000条数据（1000到5000页）以内的时候还是可以的</li><li>但是如果数据过多的话，就会出现深分页问题：<ul><li>如果你要深度获取1000000到1000100页的数据，性能问题会非常明显的暴露出来：CPU、内存、IO、网络带宽等等，而且Elasticsearch本身就是个Java应用，若并发上去，Elasticsearch会快就会 OOM</li></ul></li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="scroll-方式"><a href="#scroll-方式" class="headerlink" title="scroll 方式"></a>scroll 方式</h3><ul><li>scroll 方式原理就是通过每次查询后，返回一个scroll_id。根据这个scroll_id 进行下一页的查询</li><li><p>可以把这个scroll_id理解为通常关系型数据库中的游标。但是，这种scroll方式的缺点是不能够进行反复查询，也就是说，只能进行下一页，不能进行上一页</p></li><li><p>假设测试索引共有10条文档，每次取出4条</p></li></ul><ol><li><p>首先取出前4条，并且得到scroll_id</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST /cars/transactions/_search?scroll=3m  ## 这里的3m代表的是持续滚动时间，如果过了3分钟，还没有查询下一页，那么这个scroll_id就会失效</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot;: 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----返回数据----</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_scroll_id&quot;: &quot;DnF1ZXJ5VGhlbkZldGNoBQAAAAAAACZCFkVhdzd1Skd4UkotRTBCSVc5NTRtS2cAAAAAAAA8JhZJY1dNOHBZMlFEU3VBT0VpZmZGenBBAAAAAAAAPCgWSWNXTThwWTJRRFN1QU9FaWZmRnpwQQAAAAAAACZDFkVhdzd1Skd4UkotRTBCSVc5NTRtS2cAAAAAAAA8JxZJY1dNOHBZMlFEU3VBT0VpZmZGenBB&quot;,</span><br><span class="line">  &quot;took&quot;: 6,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再次查询下一页，注意，这里查询时不需要指定index，只需要指定scroll_id和本次的持续滚动时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">&quot;scroll&quot; : &quot;3m&quot;,</span><br><span class="line">&quot;scroll_id&quot;:&quot;DnF1ZXJ5VGhlbkZldGNoBQAAAAAAACZCFkVhdzd1Skd4UkotRTBCSVc5NTRtS2cAAAAAAAA8JhZJY1dNOHBZMlFEU3VBT0VpZmZGenBBAAAAAAAAPCgWSWNXTThwWTJRRFN1QU9FaWZmRnpwQQAAAAAAACZDFkVhdzd1Skd4UkotRTBCSVc5NTRtS2cAAAAAAAA8JxZJY1dNOHBZMlFEU3VBT0VpZmZGenBB&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----再次返回3条数据----</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>再次根据返回的 scroll_id 查询</li><li>发现这次只有两条数据，我们再次根据返回的scroll_id查询</li><li>已经没有数据了，说明已经滚动到最后了</li><li><p>这个时候可以删除这个scroll_id</p><ul><li><p>使用如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /_search/scroll/DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAueFjZoLTd3UEptUXFXR2Z6Nm5iZ3FqalEAAAAAAAALnBY2aC03d1BKbVFxV0dmejZuYmdxampRAAAAAAAAC58WNmgtN3dQSm1RcVdHZno2bmJncWpqUQAAAAAAAAudFjZoLTd3UEptUXFXR2Z6Nm5iZ3FqalEAAAAAAAALoBY2aC03d1BKbVFxV0dmejZuYmdxampR</span><br></pre></td></tr></table></figure></li><li><p>也可以删除所有scroll_id：</p><figure class="highlight plain"><figcaption><span>/_search/scroll/_all```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### Search After</span><br><span class="line">- Elasticsearch5.x 新特性</span><br><span class="line">- [官方文档](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-search-after.html)</span><br><span class="line"></span><br><span class="line">- 首次查询语句</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>GET cars/_search<br>{<br>    “size”: 2,<br>    “query”: {<br>        “match_all” : {</p><pre><code>    }},&quot;sort&quot;: [    {&quot;_id&quot;: &quot;desc&quot;},    {&quot;price&quot;: &quot;desc&quot;}]</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 需要使用一个每个文档的值都是独有的字段作为排序条件，建议使用 _id</span><br><span class="line">- 返回数据</span><br></pre></td></tr></table></figure></p><p>{<br>  ···<br>    “hits”: [<br>      {<br>        “_index”: “cars”,<br>        “_type”: “transactions”,<br>        “_id”: “CG8kzWIBWwL7t5InLKFv”,<br>        “_score”: null,<br>        “_source”: {<br>          “price”: 25000,<br>          “color”: “blue”,<br>          “make”: “ford”,<br>          “sold”: “2014-02-12”<br>        },<br>        “sort”: [<br>          “CG8kzWIBWwL7t5InLKFv”,<br>          25000<br>        ]<br>      },<br>      {<br>        “_index”: “cars”,<br>        “_type”: “transactions”,<br>        “_id”: “Bm8kzWIBWwL7t5InLKFv”,<br>        “_score”: null,<br>        “_source”: {<br>          “price”: 20000,<br>          “color”: “red”,<br>          “make”: “honda”,<br>          “sold”: “2014-11-05”<br>        },<br>        “sort”: [<br>          “Bm8kzWIBWwL7t5InLKFv”,<br>          20000<br>        ]<br>      }<br>    ]<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 可以看到每一个返回的文档都有一个 sort 数组，**将它作为下一次查询的search_after参数值**</span><br><span class="line">- 继续查询，使用 search_after 参数</span><br></pre></td></tr></table></figure></p><p>GET cars/_search<br>{<br>    “size”: 2,<br>    “query”: {<br>        “match_all” : {</p><pre><code>    }},&quot;search_after&quot;: [&quot;Bm8kzWIBWwL7t5InLKFv&quot;, 20000],  ## 上一个请求返回的值 &quot;sort&quot;: [    {&quot;_id&quot;: &quot;desc&quot;},    {&quot;price&quot;: &quot;desc&quot;}]</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 使用 search_after 时 from 参数一定要设置成 0 或 -1</span><br><span class="line">- 返回数据</span><br></pre></td></tr></table></figure></p><p>{<br> ···<br>  “hits”: {<br>    “total”: 8,<br>    “max_score”: null,<br>    “hits”: [<br>      {<br>        “_index”: “cars”,<br>        “_type”: “transactions”,<br>        “_id”: “BW8kzWIBWwL7t5InLKFv”,<br>        “_score”: null,<br>        “_source”: {<br>          “price”: 12000,<br>          “color”: “green”,<br>          “make”: “toyota”,<br>          “sold”: “2014-08-19”<br>        },<br>        “sort”: [<br>          “BW8kzWIBWwL7t5InLKFv”,<br>          12000<br>        ]<br>      },<br>      {<br>        “_index”: “cars”,<br>        “_type”: “transactions”,<br>        “_id”: “BG8kzWIBWwL7t5InLKFv”,<br>        “_score”: null,<br>        “_source”: {<br>          “price”: 15000,<br>          “color”: “blue”,<br>          “make”: “toyota”,<br>          “sold”: “2014-07-02”<br>        },<br>        “sort”: [<br>          “BG8kzWIBWwL7t5InLKFv”,<br>          15000<br>        ]<br>      }<br>    ]<br>  }<br>}<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是深分页问题？&quot;&gt;&lt;a href=&quot;#什么是深分页问题？&quot; class=&quot;headerlink&quot; title=&quot;什么是深分页问题？&quot;&gt;&lt;/a&gt;什么是深分页问题？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果想查询第5000-5100条数据，发送如下查询条件就可以做到：
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】8.聚合</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/8.%E8%81%9A%E5%90%88/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/8.聚合/</id>
    <published>2018-05-11T08:54:40.729Z</published>
    <updated>2018-05-11T09:03:35.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><ul><li>在Elasticsearch的聚合中需要掌握两个核心的概念：桶（bucket）、指标（metric）<ul><li>桶（bucket）: 满足特定条件的文档的集<ul><li>简单来说桶就是满足特定条件的文档的集合。</li><li>当聚合开始被执行，每个文档里面的值通过计算来决定符合哪个桶的条件，如果匹配到，文档将放入相应的桶并接着开始聚合操作。</li><li>桶也可以被嵌套在其他桶里面。</li></ul></li><li>指标（metric）: 对桶内的文档进行聚合分析的操作<ul><li>桶能让我们划分文档到有意义的集合，但是最终我们需要的是对这些桶内的文档进行一些指标的计算。分桶是一种达到目的地的手段：它提供了一种给文档分组的方法来让我们可以计算感兴趣的指标</li><li>大多数指标是简单的数学运算（如：最小值、平均值、最大值、汇总），这些是通过文档的值来计算的</li></ul></li><li>每个聚合都是一个或者多个桶和零个或者多个指标的组合，聚合可能只有一个桶，可能只有一个指标，或者可能两个都有。也有可能一些桶嵌套在其他桶里面</li></ul></li></ul><ul><li>翻译成粗略的SQL语句来解释的话：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(color)　　---&gt; 相当于指标</span><br><span class="line">FROM table</span><br><span class="line">GROUP BY color　     　---&gt; 相当于桶</span><br></pre></td></tr></table></figure></li></ul><h2 id="简单聚合"><a href="#简单聚合" class="headerlink" title="简单聚合"></a>简单聚合</h2><ul><li><p>先批量索引一些数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /cars/transactions/_bulk</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 10000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-10-28&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 20000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-11-05&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 30000, &quot;color&quot; : &quot;green&quot;, &quot;make&quot; : &quot;ford&quot;, &quot;sold&quot; : &quot;2014-05-18&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 15000, &quot;color&quot; : &quot;blue&quot;, &quot;make&quot; : &quot;toyota&quot;, &quot;sold&quot; : &quot;2014-07-02&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 12000, &quot;color&quot; : &quot;green&quot;, &quot;make&quot; : &quot;toyota&quot;, &quot;sold&quot; : &quot;2014-08-19&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 20000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-11-05&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 80000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;bmw&quot;, &quot;sold&quot; : &quot;2014-01-01&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 25000, &quot;color&quot; : &quot;blue&quot;, &quot;make&quot; : &quot;ford&quot;, &quot;sold&quot; : &quot;2014-02-12&quot; &#125;</span><br></pre></td></tr></table></figure></li><li><p>汽车经销商可能会想知道哪个颜色的汽车销量最好，用聚合可以轻易得到结果，用 terms 桶操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,  ## 不显示 hits 原数据，只显示聚合统计结果，提高查询速度</span><br><span class="line">    &quot;aggs&quot; : &#123;   ## 完整形式 aggregations 同样有效 </span><br><span class="line">        &quot;popular_colors&quot; : &#123;   ## 可以为聚合指定一个我们想要名称</span><br><span class="line">            &quot;terms&quot; : &#123;   ## 定义单个桶的类型</span><br><span class="line">              &quot;field&quot; : &quot;color&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此时应该会报出异常：</p><ul><li>“Fielddata is disabled on text fields by default. Set fielddata=true on [color] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.”</li><li>出现该错误是因为5.x之后，Elasticsearch 对排序、聚合所依据的字段用单独的数据结构(fielddata)缓存到内存里了，但是在text字段上默认是禁用的，如果有需要单独开启，这样做的目的是为了节省内存空间。——<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/fielddata.html" target="_blank" rel="noopener">官方文档地址</a></li></ul></li><li><p>解决方法：将color字段的fielddata设置为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /cars/_mapping/transactions</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;color&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重试聚合操作，返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 48,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 8,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;popular_colors&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;red&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;blue&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;green&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>每个桶的 key 都与 color 字段里找到的唯一词对应。它总会包含 doc_count 字段，告诉我们包含该词项的文档数量</p></li></ul><h2 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h2><ul><li>将度量 嵌套 在桶内， 度量会基于桶内的文档计算统计结果</li><li><p>例如为汽车的例子加入 average 平均度量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;color&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;   ## 为度量新增 aggs 层</span><br><span class="line">            &quot;avg_price&quot;: &#123;   ## 为度量指定名字： avg_price</span><br><span class="line">               &quot;avg&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;price&quot;   ## 为 price 字段定义 avg 度量</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>搜索由 toyota 制作的每个颜色的汽车销量和均价，并按均价倒序输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;query&quot;: &#123;</span><br><span class="line">     &quot;match&quot;: &#123;</span><br><span class="line">       &quot;make&quot;: &quot;toyota&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;, </span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;color&quot;,</span><br><span class="line">            &quot;order&quot;: &#123;  </span><br><span class="line">              &quot;avg_price&quot;: &quot;desc&quot;  ## 根据均价倒序输出</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;   ## 为度量新增 aggs 层</span><br><span class="line">            &quot;avg_price&quot;: &#123; </span><br><span class="line">               &quot;avg&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;price&quot;   ## 为 price 字段定义 avg 度量</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="嵌套桶"><a href="#嵌套桶" class="headerlink" title="嵌套桶"></a>嵌套桶</h2><ul><li><p>查询每个颜色的汽车制造商的分布</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;color&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;avg_price&quot;: &#123; </span><br><span class="line">               &quot;avg&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;price&quot;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;make&quot;: &#123; </span><br><span class="line">                &quot;terms&quot;: &#123;</span><br><span class="line">                    &quot;field&quot;: &quot;make&quot; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回数据</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">   &quot;aggregations&quot;: &#123;</span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;buckets&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">               &quot;key&quot;: &quot;red&quot;,</span><br><span class="line">               &quot;doc_count&quot;: 4,  ## 红色车有四辆</span><br><span class="line">               &quot;make&quot;: &#123;  ## 在原有基础上，为每一个桶嵌入了一个新的聚合</span><br><span class="line">                  &quot;buckets&quot;: [</span><br><span class="line">                     &#123;</span><br><span class="line">                        &quot;key&quot;: &quot;honda&quot;,   ## 红色车中的三辆是 Honda 本田制造，一辆是 BMW 宝马制造</span><br><span class="line">                        &quot;doc_count&quot;: 3</span><br><span class="line">                     &#125;,</span><br><span class="line">                     &#123;</span><br><span class="line">                        &quot;key&quot;: &quot;bmw&quot;,</span><br><span class="line">                        &quot;doc_count&quot;: 1</span><br><span class="line">                     &#125;</span><br><span class="line">                  ]</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;avg_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 32500   ## 红色车的平均售价是 $32，500 美元</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><h3 id="histogram-柱状图"><a href="#histogram-柱状图" class="headerlink" title="histogram 柱状图"></a>histogram 柱状图</h3><ul><li><p>查询每个售价区间内汽车的销量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;:&#123;</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">         &quot;histogram&quot;:&#123;   ## 定义桶类型为 histogram</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;,  ## 数值字段</span><br><span class="line">            &quot;interval&quot;: 20000  ## 桶大小间隔，间隔 20000 意味着我们将会得到如 [0-19999, 20000-39999, ...] 这样的区间</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;:&#123;</span><br><span class="line">            &quot;revenue&quot;: &#123;  ## 嵌入 revenue 桶</span><br><span class="line">               &quot;sum&quot;: &#123; </span><br><span class="line">                 &quot;field&quot; : &quot;price&quot;  ## 对每个售价区间的文档中 price 字段的值进行求和</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">···</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;price&quot;: &#123;</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 0,   ## 代表区间 [0 - 19999]</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;revenue&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 37000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 20000,  ## 代表区间 [20000 - 39999]</span><br><span class="line">          &quot;doc_count&quot;: 4,</span><br><span class="line">          &quot;revenue&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 95000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 40000,</span><br><span class="line">          &quot;doc_count&quot;: 0,</span><br><span class="line">          &quot;revenue&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 60000,</span><br><span class="line">          &quot;doc_count&quot;: 0,</span><br><span class="line">          &quot;revenue&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 80000,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;revenue&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 80000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="extended-stats-度量"><a href="#extended-stats-度量" class="headerlink" title="extended_stats 度量"></a>extended_stats 度量</h3><ul><li>可以获得桶的平均值、标准差、最大最小值等信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot; : 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;makes&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;  ## 定义桶类型为 terms</span><br><span class="line">        &quot;field&quot;: &quot;make&quot;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;stats&quot;: &#123;</span><br><span class="line">          &quot;extended_stats&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="按时间统计"><a href="#按时间统计" class="headerlink" title="按时间统计"></a>按时间统计</h2><ul><li><p>查询每月销售多少台汽车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;sales&quot;: &#123;</span><br><span class="line">         &quot;date_histogram&quot;: &#123;  ## 定义桶类型为 date_histogram</span><br><span class="line">            &quot;field&quot;: &quot;sold&quot;,</span><br><span class="line">            &quot;interval&quot;: &quot;month&quot;,   ## 以月份为时间间隔</span><br><span class="line">            &quot;format&quot;: &quot;yyyy-MM-dd&quot; </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">···</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;sales&quot;: &#123;</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-01-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1388534400000,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-02-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1391212800000,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-03-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1393632000000,</span><br><span class="line">          &quot;doc_count&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-04-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1396310400000,</span><br><span class="line">          &quot;doc_count&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-05-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1398902400000,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-06-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1401580800000,</span><br><span class="line">          &quot;doc_count&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-07-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1404172800000,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-08-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1406851200000,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-09-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1409529600000,</span><br><span class="line">          &quot;doc_count&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-10-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1412121600000,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key_as_string&quot;: &quot;2014-11-01&quot;,</span><br><span class="line">          &quot;key&quot;: 1414800000000,</span><br><span class="line">          &quot;doc_count&quot;: 2</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="强制返回空-buckets-和指定区间"><a href="#强制返回空-buckets-和指定区间" class="headerlink" title="强制返回空 buckets 和指定区间"></a>强制返回空 buckets 和指定区间</h2><ul><li>上一个例子中的结果少了一些月份，而通常，你并不想要这样。对于很多应用，你可能想直接把结果导入到图形库中，而不想做任何后期加工。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;sales&quot;: &#123;</span><br><span class="line">         &quot;date_histogram&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;sold&quot;,</span><br><span class="line">            &quot;interval&quot;: &quot;month&quot;,</span><br><span class="line">            &quot;format&quot;: &quot;yyyy-MM-dd&quot;,</span><br><span class="line">            &quot;min_doc_count&quot; : 0,   ## 强制返回空 buckets</span><br><span class="line">            &quot;extended_bounds&quot; : &#123;   ## 强制返回整年</span><br><span class="line">                &quot;min&quot; : &quot;2014-01-01&quot;,</span><br><span class="line">                &quot;max&quot; : &quot;2014-12-31&quot;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="百分位数度量"><a href="#百分位数度量" class="headerlink" title="百分位数度量"></a>百分位数度量</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/percentiles.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/percentiles.html</a></p><h2 id="过滤桶"><a href="#过滤桶" class="headerlink" title="过滤桶"></a>过滤桶</h2><h3 id="filter-只对聚合结果过滤，不对查询结果过滤"><a href="#filter-只对聚合结果过滤，不对查询结果过滤" class="headerlink" title="filter 只对聚合结果过滤，不对查询结果过滤"></a>filter 只对聚合结果过滤，不对查询结果过滤</h3><ul><li>使用 过滤桶 在 <strong>查询</strong> 范围基础上应用过滤器。当文档满足过滤桶的条件时，我们将其加入到桶内</li><li>因为 filter 桶和其他桶的操作方式一样，所以可以随意将其他桶和度量嵌入其中。所有嵌套的组件都会 “继承” 这个过滤<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;query&quot;:&#123;</span><br><span class="line">      &quot;match&quot;: &#123;</span><br><span class="line">         &quot;make&quot;: &quot;ford&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;aggs&quot;:&#123;</span><br><span class="line">      &quot;recent_sales&quot;: &#123;</span><br><span class="line">         &quot;filter&quot;: &#123;   ## 定义过滤桶</span><br><span class="line">            &quot;range&quot;: &#123;</span><br><span class="line">               &quot;sold&quot;: &#123;</span><br><span class="line">                  &quot;from&quot;: &quot;now-1M&quot; </span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;average_price&quot;:&#123;</span><br><span class="line">               &quot;avg&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;price&quot; </span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="post-filter-只对搜索结果过滤，不对过滤聚合结果过滤"><a href="#post-filter-只对搜索结果过滤，不对过滤聚合结果过滤" class="headerlink" title="post_filter 只对搜索结果过滤，不对过滤聚合结果过滤"></a>post_filter 只对搜索结果过滤，不对过滤聚合结果过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">            &quot;make&quot;: &quot;ford&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;post_filter&quot;: &#123;    </span><br><span class="line">        &quot;term&quot; : &#123;</span><br><span class="line">            &quot;color&quot; : &quot;green&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;all_colors&quot;: &#123;</span><br><span class="line">            &quot;terms&quot; : &#123; &quot;field&quot; : &quot;color&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多桶排序"><a href="#多桶排序" class="headerlink" title="多桶排序"></a>多桶排序</h2><h3 id="内置排序"><a href="#内置排序" class="headerlink" title="内置排序"></a>内置排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;colors&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123;</span><br><span class="line">              &quot;field&quot; : &quot;color&quot;,</span><br><span class="line">              &quot;order&quot;: &#123;</span><br><span class="line">                &quot;_count&quot; : &quot;asc&quot;  ## 按文档数升序排序</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>_count：按文档数排序。对 terms 、 histogram 、 date_histogram 有效。</li><li>_term：按词项的字符串值的字母顺序排序。只在 terms 内使用。</li><li>_key：按每个桶的键值数值排序（理论上与 _term 类似）。 只在 histogram 和 date_histogram 内使用。</li></ul><h3 id="按度量排序"><a href="#按度量排序" class="headerlink" title="按度量排序"></a>按度量排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;colors&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123;</span><br><span class="line">              &quot;field&quot; : &quot;color&quot;,</span><br><span class="line">              &quot;order&quot;: &#123;</span><br><span class="line">                &quot;stats.variance&quot; : &quot;asc&quot;   ## 多指度量只用点式路径定位</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;aggs&quot;: &#123;</span><br><span class="line">                &quot;stats&quot;: &#123;</span><br><span class="line">                    &quot;extended_stats&quot;: &#123;&quot;field&quot;: &quot;price&quot;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="近似聚合"><a href="#近似聚合" class="headerlink" title="近似聚合"></a>近似聚合</h2><h3 id="cardinality-统计去重后的数量"><a href="#cardinality-统计去重后的数量" class="headerlink" title="cardinality 统计去重后的数量"></a>cardinality 统计去重后的数量</h3><ul><li><p>获得经销商销售汽车颜色的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;distinct_colors&quot; : &#123;</span><br><span class="line">            &quot;cardinality&quot; : &#123;</span><br><span class="line">              &quot;field&quot; : &quot;color&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SQL形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT color)</span><br><span class="line">FROM cars</span><br></pre></td></tr></table></figure></li><li><p>嵌套桶中使用：查询每个月有多少种颜色的车售出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/transactions/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot; : 0,</span><br><span class="line">  &quot;aggs&quot; : &#123;</span><br><span class="line">      &quot;months&quot; : &#123;</span><br><span class="line">        &quot;date_histogram&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;sold&quot;,</span><br><span class="line">          &quot;interval&quot;: &quot;month&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;aggs&quot;: &#123;</span><br><span class="line">          &quot;distinct_colors&quot; : &#123;</span><br><span class="line">              &quot;cardinality&quot; : &#123;</span><br><span class="line">                &quot;field&quot; : &quot;color&quot;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/cardinality.html" target="_blank" rel="noopener">速度优化</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;聚合&quot;&gt;&lt;a href=&quot;#聚合&quot; class=&quot;headerlink&quot; title=&quot;聚合&quot;&gt;&lt;/a&gt;聚合&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在Elasticsearch的聚合中需要掌握两个核心的概念：桶（bucket）、指标（metric）&lt;ul&gt;
&lt;li&gt;桶（buc
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】7.2 自动补全、纠错、拼音搜索</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/7.2%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E3%80%81%E7%BA%A0%E9%94%99%E3%80%81%E6%8B%BC%E9%9F%B3%E6%90%9C%E7%B4%A2/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/7.2自动补全、纠错、拼音搜索/</id>
    <published>2018-05-11T08:54:40.725Z</published>
    <updated>2018-05-11T09:03:58.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="more-like-this-实现相似文档搜索"><a href="#more-like-this-实现相似文档搜索" class="headerlink" title="more_like_this 实现相似文档搜索"></a>more_like_this 实现相似文档搜索</h2><ul><li><p>根据文本搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /ik/message/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;more_like_this&quot; : &#123;</span><br><span class="line">            &quot;fields&quot; : [&quot;content&quot;],</span><br><span class="line">            &quot;like&quot; : [&quot;一个&quot;],</span><br><span class="line">            &quot;min_term_freq&quot;: 1,  ## 一篇文档中一个词语至少出现次数，小于这个值的词将被忽略，默认是2</span><br><span class="line">            &quot;min_doc_freq&quot;: 1  ## 一个词语最少在多少篇文档中出现，小于这个值的词会将被忽略，默认是无限制</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>根据指定文档搜索</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /ik/message/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;more_like_this&quot; : &#123;</span><br><span class="line">            &quot;fields&quot; : [&quot;content&quot;],</span><br><span class="line">            &quot;like&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;_index&quot; : &quot;ik&quot;,</span><br><span class="line">              &quot;_type&quot; : &quot;message&quot;,</span><br><span class="line">              &quot;_id&quot; : &quot;QOko_GIBpX-3-f32b0qP&quot;</span><br><span class="line">            &#125;],</span><br><span class="line">            &quot;min_term_freq&quot;: 1,</span><br><span class="line">            &quot;min_doc_freq&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据传入的 docNum 找出该文档里去除停用词后的高频词，然后用这些高频词生成 Queue，最后把 Queue 传进 search 方法得到最后的结果。</p></li><li>主要思想是认为这些高频词足以表示文档信息，然后通过搜索得到最后与此 doc 类似的结果。</li><li><a href="http://www.searchtech.pro/articles/2013/02/16/1360971902049.html" target="_blank" rel="noopener">参数说明</a></li></ul><h2 id="suggest-自动补全或者纠错"><a href="#suggest-自动补全或者纠错" class="headerlink" title="suggest 自动补全或者纠错"></a>suggest 自动补全或者纠错</h2><h4 id="Term-suggester"><a href="#Term-suggester" class="headerlink" title="Term suggester"></a>Term suggester</h4><ul><li><p>Term suggester正如其名，只基于 analyze 过的单个 term 去提供建议，并不会考虑多个 term 之间的关系。API调用方只需为每个token挑选options里的词，组合在一起返回给用户前端即可。</p></li><li><p>准备一个叫做blogs的索引，配置一个text字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /blogs/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;tech&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;body&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过bulk api写入几条文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk/?refresh=true</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Lucene is cool&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Elasticsearch builds on top of lucene&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Elasticsearch rocks&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Elastic is the company behind ELK stack&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;elk rocks&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123;  &quot;body&quot;: &quot;elasticsearch is rock solid&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行一次 suggester 搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /blogs/_search</span><br><span class="line">&#123; </span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;my-suggestion&quot;: &#123;</span><br><span class="line">      &quot;text&quot;: &quot;lucne rock&quot;,  ## 通常是用户界面上输入的内容</span><br><span class="line">      &quot;term&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;body&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;my-suggestion&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;lucne&quot;,</span><br><span class="line">        &quot;offset&quot;: 0,</span><br><span class="line">        &quot;length&quot;: 5,</span><br><span class="line">        &quot;options&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;text&quot;: &quot;lucene&quot;,</span><br><span class="line">            &quot;score&quot;: 0.8,</span><br><span class="line">            &quot;freq&quot;: 2</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;rock&quot;,</span><br><span class="line">        &quot;offset&quot;: 6,</span><br><span class="line">        &quot;length&quot;: 4,</span><br><span class="line">        &quot;options&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;text&quot;: &quot;rocks&quot;,</span><br><span class="line">            &quot;score&quot;: 0.75,</span><br><span class="line">            &quot;freq&quot;: 2</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html" target="_blank" rel="noopener">Term suggester 参数文档</a></p></li></ul><h4 id="Phrase-suggester"><a href="#Phrase-suggester" class="headerlink" title="Phrase suggester"></a>Phrase suggester</h4><ul><li>Phrase suggester 会直接给出和用户输入文本相似的内容，在 Term suggester 的基础上，考量多个term之间的关系，比如是否同时出现在索引的原文里，相邻程度，以及词频等等。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /blogs/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;my-suggestion&quot;: &#123;</span><br><span class="line">      &quot;text&quot;: &quot;lucne and elasticsear rock&quot;,</span><br><span class="line">      &quot;phrase&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;body&quot;,</span><br><span class="line">        &quot;highlight&quot;: &#123;</span><br><span class="line">          &quot;pre_tag&quot;: &quot;&lt;em&gt;&quot;,</span><br><span class="line">          &quot;post_tag&quot;: &quot;&lt;/em&gt;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>返回数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;my-suggestion&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;lucne and elasticsear rock&quot;,</span><br><span class="line">        &quot;offset&quot;: 0,</span><br><span class="line">        &quot;length&quot;: 26,</span><br><span class="line">        &quot;options&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;text&quot;: &quot;lucne and elasticsearch rocks&quot;,</span><br><span class="line">            &quot;highlighted&quot;: &quot;lucne and &lt;em&gt;elasticsearch rocks&lt;/em&gt;&quot;,</span><br><span class="line">            &quot;score&quot;: 0.12709484</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;text&quot;: &quot;lucne and elasticsearch rock&quot;,</span><br><span class="line">            &quot;highlighted&quot;: &quot;lucne and &lt;em&gt;elasticsearch&lt;/em&gt; rock&quot;,</span><br><span class="line">            &quot;score&quot;: 0.10422645</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;text&quot;: &quot;lucne and elasticsear rocks&quot;,</span><br><span class="line">            &quot;highlighted&quot;: &quot;lucne and elasticsear &lt;em&gt;rocks&lt;/em&gt;&quot;,</span><br><span class="line">            &quot;score&quot;: 0.10036137</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为lucene和elasticsearch曾经在同一条原文里出现过，同时替换2个term的可信度更高，所以打分较高，排在第一位返回。</p></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-phrase.html" target="_blank" rel="noopener">Phrase Suggester 参数文档</a></li></ul><blockquote><h4 id="未解决问题"><a href="#未解决问题" class="headerlink" title="未解决问题"></a>未解决问题</h4><ul><li>Term suggester 和 Phrase Suggester 无法进行中文补全/纠错（Completion Suggester 可以）<ul><li>版本差异参数设置问题</li><li>分词器</li></ul></li></ul></blockquote><h4 id="Completion-Suggester"><a href="#Completion-Suggester" class="headerlink" title="Completion Suggester"></a>Completion Suggester</h4><ul><li>主要针对的应用场景就是”Auto Completion”。</li><li><p>此场景下用户每输入一个字符的时候，就需要即时发送一次查询请求到后端查找匹配项，在用户输入速度较高的情况下对后端响应速度要求比较苛刻。因此实现上它和前面两个 Suggester 采用了不同的数据结构，索引并非通过倒排来完成，而是将 analyze 过的数据编码成 FST 和索引一起存放。对于一个 open 状态的索引，FST 会被 ES 整个装载到内存里的，进行前缀查找速度极快。但是 FST <strong>只能用于前缀查找</strong>，这也是Completion Suggester的局限所在。</p></li><li><p>为了使用 Completion Suggester，字段的类型需要专门定义如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /blogs_completion/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;tech&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;body&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;completion&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk/?refresh=true</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs_completion&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Lucene is cool&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs_completion&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Elasticsearch builds on top of lucene&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs_completion&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Elasticsearch rocks&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs_completion&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Elastic is the company behind ELK stack&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs_completion&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;the elk stack rocks&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs_completion&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;elasticsearch is rock solid&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST blogs_completion/_search?pretty</span><br><span class="line">&#123; &quot;size&quot;: 0,</span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;blog-suggest&quot;: &#123;</span><br><span class="line">      &quot;prefix&quot;: &quot;elastic i&quot;,</span><br><span class="line">      &quot;completion&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;body&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;blog-suggest&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;elastic i&quot;,</span><br><span class="line">        &quot;offset&quot;: 0,</span><br><span class="line">        &quot;length&quot;: 9,</span><br><span class="line">        &quot;options&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;text&quot;: &quot;Elastic is the company behind ELK stack&quot;,</span><br><span class="line">            &quot;_index&quot;: &quot;blogs_completion&quot;,</span><br><span class="line">            &quot;_type&quot;: &quot;tech&quot;,</span><br><span class="line">            &quot;_id&quot;: &quot;v-qtAGMBpX-3-f32xG7c&quot;,</span><br><span class="line">            &quot;_score&quot;: 1,</span><br><span class="line">            &quot;_source&quot;: &#123;</span><br><span class="line">              &quot;body&quot;: &quot;Elastic is the company behind ELK stack&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-completion.html" target="_blank" rel="noopener">Completion Suggester 参数文档</a></p></li></ul><h2 id="拼音搜索"><a href="#拼音搜索" class="headerlink" title="拼音搜索"></a>拼音搜索</h2><ul><li><p><a href="https://github.com/medcl/elasticsearch-analysis-pinyin" target="_blank" rel="noopener">github: elasticsearch-analysis-pinyin</a></p></li><li><p>安装 elasticsearch-analysis-pinyin 分词器</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v6.2.3/elasticsearch-analysis-pinyin-6.2.3.zip</span><br></pre></td></tr></table></figure></li><li><p>创建空索引，创建分词器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /medcl/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;index&quot; : &#123;</span><br><span class="line">      &quot;analysis&quot; : &#123;</span><br><span class="line">          &quot;analyzer&quot; : &#123;</span><br><span class="line">              &quot;pinyin_analyzer&quot; : &#123;</span><br><span class="line">                  &quot;tokenizer&quot; : &quot;my_pinyin&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;tokenizer&quot; : &#123;</span><br><span class="line">              &quot;my_pinyin&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;pinyin&quot;,</span><br><span class="line">                  &quot;keep_first_letter&quot;:true,</span><br><span class="line">                  &quot;keep_separate_first_letter&quot; : true,</span><br><span class="line">                  &quot;keep_none_chinese&quot; : true,</span><br><span class="line">                  &quot;trim_whitespace&quot; : true,</span><br><span class="line">                  &quot;keep_none_chinese_in_first_letter&quot; : true,</span><br><span class="line">                  &quot;keep_full_pinyin&quot; : true,</span><br><span class="line">                  &quot;keep_original&quot; : true,</span><br><span class="line">                  &quot;limit_first_letter_length&quot; : 16,</span><br><span class="line">                  &quot;lowercase&quot; : true</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 mapping</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /medcl/folks/_mapping </span><br><span class="line">&#123;</span><br><span class="line">    &quot;folks&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot; : &quot;ik_max_word&quot;,</span><br><span class="line">                &quot;fields&quot;: &#123;</span><br><span class="line">                    &quot;pinyin&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;completion&quot;, ## 如果仅用于查询则设为 text</span><br><span class="line">                        &quot;analyzer&quot;: &quot;pinyin_analyzer&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk/?refresh=true</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;medcl&quot;, &quot;_type&quot; : &quot;folks&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;name&quot;: &quot;刘德华&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;medcl&quot;, &quot;_type&quot; : &quot;folks&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;name&quot;: &quot;刘力菲&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;medcl&quot;, &quot;_type&quot; : &quot;folks&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;name&quot;: &quot;梁婉琳&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;medcl&quot;, &quot;_type&quot; : &quot;folks&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;name&quot;: &quot;刘倩倩&quot;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;medcl&quot;, &quot;_type&quot; : &quot;folks&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;name&quot;: &quot;刘嘉怡&quot;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST medcl/_search?pretty</span><br><span class="line">&#123; &quot;size&quot;: 0,</span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;blog-suggest&quot;: &#123;</span><br><span class="line">      &quot;prefix&quot;: &quot;刘dh&quot;,</span><br><span class="line">      &quot;completion&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.pinyin&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /medcl/folks/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;: &#123;</span><br><span class="line">            &quot;name.pinyin&quot;: &quot;刘dh&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数说明<ul><li><strong>keep_first_letter</strong>: 存储首字母<ul><li>eg: 刘德华 &gt; ldh</li><li>default: true</li></ul></li><li><strong>keep_separate_first_letter</strong>: 将首字母分开存储<ul><li>eg: 刘德华 &gt; l,d,h</li><li>default: false</li></ul></li><li><strong>limit_first_letter_length</strong>: 限制首字母最大长度<ul><li>default: 16</li></ul></li><li><strong>keep_full_pinyin</strong>: 分开存储每个字的全拼<ul><li>eg: 刘德华 &gt; [liu,de,hua]</li><li>default: true</li></ul></li><li><strong>keep_joined_full_pinyin</strong>：连接每个字的全拼进行存储<ul><li>eg: 刘德华 &gt; [liudehua]</li><li>default: false</li></ul></li><li><strong>keep_none_chinese</strong>：保留非中文字或数字<ul><li>default: true</li></ul></li><li><strong>keep_none_chinese_together</strong>：将非中文字存储在一起<ul><li>true: eg: DJ音乐家 -&gt; DJ,yin,yue,jia</li><li>false: eg: DJ音乐家 -&gt; D,J,yin,yue,jia</li><li>注意: 需要先设置 keep_none_chinese 为true</li><li>default: true, </li></ul></li><li><strong>keep_none_chinese_in_first_letter</strong>：将非中文字和首字母存储在一起<ul><li>eg: 刘德华AT2016 -&gt; ldhat2016</li><li>default: true</li></ul></li><li><strong>keep_none_chinese_in_joined_full_pinyin</strong>: 讲非中文字和全拼音存储在一起<ul><li>eg: 刘德华2016 -&gt; liudehua2016</li><li>default: false</li></ul></li><li><strong>none_chinese_pinyin_tokenize</strong>: 若非中文字是拼音则将它们拆分<ul><li>eg: liudehuaalibaba13zhuanghan -&gt; liu,de,hua,a,li,ba,ba,13,zhuang,han</li><li>default: true</li><li>注意: 需要先将keep_none_chinese 和 keep_none_chinese_together 设置为 true</li></ul></li><li><strong>keep_original</strong>: 保存源字符串<ul><li>default: false</li></ul></li><li><strong>lowercase</strong>：将非中文字转为小写<ul><li>default: true</li></ul></li><li><strong>trim_whitespace</strong>: 删除空格<ul><li>default: true</li></ul></li><li><strong>remove_duplicated_term</strong>: 删除重复项<ul><li>eg: de的 &gt; de</li><li>default: false</li><li>注意: 位置相关查询可能受影响</li></ul></li><li><strong>ignore_pinyin_offset</strong>:  在6.0之后，偏移被严格限制，不允许重叠的标记，使用这个参数，重叠的标记将被忽略偏移所允许，所有与位置相关的查询或高亮将会变得不正确，你应该使用多个字段并指定不同的设置以达到不同的查询目的。<ul><li>default: true</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;more-like-this-实现相似文档搜索&quot;&gt;&lt;a href=&quot;#more-like-this-实现相似文档搜索&quot; class=&quot;headerlink&quot; title=&quot;more_like_this 实现相似文档搜索&quot;&gt;&lt;/a&gt;more_like_this 实现
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】7.1 Java High Level REST Client 客户端</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/7.1JavaHighLevelRESTClient%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/7.1JavaHighLevelRESTClient客户端/</id>
    <published>2018-05-11T08:54:40.721Z</published>
    <updated>2018-05-11T09:03:18.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>使用最新的 Java High Level REST Client 客户端方式<ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.2/java-rest-high-compatibility.html" target="_blank" rel="noopener">官网文档</a></li><li><a href="https://www.elastic.co/blog/the-elasticsearch-java-high-level-rest-client-is-out" target="_blank" rel="noopener">官网即将在未来版本取消 Java API 接口，所以必须使用 REST API</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/client.html" target="_blank" rel="noopener">弃用说明</a></li></ul></li></ul><ul><li><strong>JAVA API</strong>：使用的 netty 协议 TransportClient 端口9300 性能好 上手麻烦，需熟悉 API 和 ES DSL，适合大量频繁数据查询。将在7.0 开始废弃，在8.0版本移除。 </li><li><strong>JAVA REST Client</strong>：使用 http 协议 端口9200 上手简单，懂ES DSL查询即可。</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>Maven 加入依赖：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;6.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p><a href="https://github.com/ligohan/elasticsearch-high-level-REST-client" target="_blank" rel="noopener">https://github.com/ligohan/elasticsearch-high-level-REST-client</a></p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-supported-apis.html" target="_blank" rel="noopener">官方API文档</a></li><li><a href="https://github.com/hainet/elasticsearch-rest-high-level-client-sample" target="_blank" rel="noopener">demo 项目</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用最新的 Java High Level REST Client 客户端方式&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】7.0 全文检索</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/7.0%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/7.0全文检索/</id>
    <published>2018-05-11T08:54:40.716Z</published>
    <updated>2018-05-11T09:11:31.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于DSL"><a href="#关于DSL" class="headerlink" title="关于DSL"></a>关于DSL</h2><ul><li>es中的查询请求有两种方式:<ul><li>一种是简易版的查询，像传递URL参数一样去传递查询语句<ul><li>例如 <figure class="highlight plain"><figcaption><span>/library/books/_search?q</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 一种是使用JSON完整的请求体，叫做**结构化查询（DSL）**。</span><br><span class="line">- 由于DSL查询更为直观也更为简易，所以大都使用这种方式。</span><br><span class="line">- DSL查询是POST过去一个json，由于post的请求是json格式的，所以存在很多灵活性，也有很多形式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## DSL语句校验</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>GET /cars/transactions/_validate/query?explain<br>{<br>  “query”: {<br>    “match”: {<br>      “make”: “honda”<br>    }<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## match_all 查询所有</span><br><span class="line">- 常用用法</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>    “query”: {<br>        “match_all”: {}<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 指定查询字段</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>      “query”: {<br>        “match_all”: {}<br>      },<br>      “_source”: [<br>        “product_name”,<br>        “price”<br>      ]<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## sort 排序</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>      “query”: {<br>        “match_all”: {}<br>      },<br>      “sort”: [<br>        {<br>          “price”: “desc” ## 降序<br>        }<br>      ]<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; - 排序最好别用到字符串字段上。因为字符串字段会进行分词，Elasticsearch 默认是拿分词后的某个词去进行排序，排序结果往往跟我们想象的不一样。</span><br><span class="line">&gt; - 解决这个办法是在设置 mapping 的时候，多个这个字段设置一个 fields raw，让这个不进行分词，然后查询排序的时候使用这个 raw</span><br><span class="line">&gt; - 具体看这里：https://www.elastic.co/guide/cn/elasticsearch/guide/current/multi-fields.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 分页查询</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>      “query”: {<br>        “match_all”: {}<br>      },<br>      “from”: 0, ## 从第几个开始查，最开始是 0<br>      “size”: 1  ## 要查几个结果<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## range</span><br><span class="line">- 用于查询数值、时间</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>      “query”: {<br>        “range”: {<br>          “price”: {<br>            “gte”: 30000.00 ## 大于或等于30000<br>          }<br>        }<br>      }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- gte：大于或等于</span><br><span class="line">- gt：大于</span><br><span class="line">- lte：小于或等于</span><br><span class="line">- lt：小于</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## term</span><br><span class="line">- term是代表完全匹配，即**不进行分词器分析**，文档中必须包含整个搜索的词汇</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>    “query”: {<br>        “term”: {<br>            “color”: “red”  ## 查询的field和关键字<br>         }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- **使用term要确定的是这个字段是否“被分析”(analyzed)，默认的字符串是被分析的**，例如：</span><br><span class="line">- 设置mapping为：</span><br></pre></td></tr></table></figure></p><pre><code>PUT my_index{  &quot;mappings&quot;: {    &quot;my_type&quot;: {      &quot;properties&quot;: {        &quot;full_text&quot;: {          &quot;type&quot;:  &quot;text&quot;        },        &quot;exact_value&quot;: {          &quot;type&quot;:  &quot;keyword&quot;        }      }    }  }}PUT my_index/my_type/1{  &quot;full_text&quot;:   &quot;Quick Foxes!&quot;,  &quot;exact_value&quot;: &quot;Quick Foxes!&quot;  }<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- full_text: 指定类型为text，会被standard analyzer分词为如下terms [quick,foxes],存入倒排索引</span><br><span class="line">- exact_value: 指定类型为keyword，不会被分词，只有[Quick Foxes!]这一个term会被存入倒排索引</span><br><span class="line">- 当有以下请求：</span><br></pre></td></tr></table></figure>GET my_index/my_type/_search{  &quot;query&quot;: {    &quot;term&quot;: {      &quot;exact_value&quot;: &quot;Quick Foxes!&quot;    }  }}// 可以请求出数据，因为exact_value字段没有被分析，可以完全匹配GET my_index/my_type/_search{  &quot;query&quot;: {    &quot;term&quot;: {      &quot;full_text&quot;: &quot;Quick Foxes!&quot;    }  }}// 请求不出数据，因为full_text分词后的结果中没有[Quick Foxes!]这个分词<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 因此需要使用term的话，在自己设置 mapping 的时候有些不分词的字段最好设置不分词</span><br><span class="line">- Elasticsearch 5.X 之后给 text 类型的分词字段，又默认新增了一个子字段 keyword，这个字段的类型就是 keyword，是不分词的，默认保留 256 个字符。假设 product_name 是分词字段，那有一个 product_name.keyword 是不分词的字段，也可以用这个子字段来做完全匹配查询</span><br></pre></td></tr></table></figure>PUT my_index{  &quot;mappings&quot;: {    &quot;my_type&quot;: {      &quot;properties&quot;: {        &quot;full_text&quot;: {          &quot;type&quot;:  &quot;text&quot;,           &quot;fields&quot;: {            &quot;keyword&quot;: {               &quot;type&quot;: &quot;keyword&quot;            }          }        },        &quot;exact_value&quot;: {          &quot;type&quot;:  &quot;keyword&quot;        }      }    }  }}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## match</span><br><span class="line">- 查询的字段内容是进行分词处理的，只要分词的单词结果中，在数据中有满足任意的分词结果都会被查询出来</span><br></pre></td></tr></table></figure></code></pre><p>GET /cars/transactions/_search<br>{<br>      “query”: {<br>            “match”: {<br>                “make” : {<br>                    “query” : “bmw”<br>                }<br>            }<br>      }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 上面的查询匹配就会进行分词，比如&quot;宝马多少马力&quot;会被分词为&quot;宝马 多少 马力&quot;，所有有关&quot;宝马 多少 马力&quot;，那么所有包含这三个词中的一个或多个的文档就会被搜索出来</span><br><span class="line">- 根据lucene的评分机制(TF/IDF)来进行评分</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- operator：</span><br><span class="line">- or：默认，任意一个满足分词就可以，如上方例子</span><br><span class="line">- and：必须满足分词结果中所有的词，如下方例子</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>      “query”: {<br>            “match”: {<br>                “make” : {<br>                    “query” : “bmw honda”,<br>                    “operator”: “or”<br>                }<br>            }<br>      }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- minimum_should_match</span><br><span class="line">- 必须满足分词结果中百分比的词，比如搜索词被分成这样子：java 程序员 书 推荐，这里就有 4 个词，假如要求 50% 命中其中两个词就返回，我们可以这样</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>      “query”: {<br>        “match”: {<br>          “make”: {<br>            “query”: “bmw honda”,<br>            “minimum_should_match”: “50%”<br>          }<br>        }<br>      }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## multi_match </span><br><span class="line">- 如果我们希望两个字段进行匹配，其中一个字段有这个文档就满足的话，使用multi_match</span><br></pre></td></tr></table></figure></p><p>GET /cars/transactions/_search<br>{<br>      “query”: {<br>        “multi_match”: {<br>            “query” : “red”,<br>            “type”: “best_fields”,<br>            “fields” : [“make”, “color”]<br>        }<br>      }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- type：</span><br><span class="line">- best_fields：完全匹配的文档占的评分比较高</span><br><span class="line">- most_fields：越多字段匹配的文档评分越高</span><br><span class="line">- cross_fields：词条的分词词汇是分配到不同字段中的</span><br><span class="line"></span><br><span class="line">## 模糊查询</span><br><span class="line">- 在 match 查询使用</span><br></pre></td></tr></table></figure></p><p>GET my_index/my_type/_search<br>{<br>    “query”: {<br>        “match”: {<br>             “full_text”:{<br>                 “query”: “Quic”,<br>                 “fuzziness”: “AUTO”<br>             }<br>       }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 在 multi_match 使用</span><br></pre></td></tr></table></figure></p><p>GET /my_index/my_type/_search<br>{<br>    “query”: {<br>        “multi_match”: {<br>              “fields”:  [ “full_text” ],<br>              “query”:     “Quic”,<br>              “fuzziness”: “AUTO”<br>        }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## match_phrase 不分词查询</span><br><span class="line">- 对查询词不进行分词，必须完全匹配查询词才可以作为结果显示</span><br></pre></td></tr></table></figure></p><p>GET my_index/my_type/_search<br>{<br>    “query”: {<br>        “match_phrase”: {<br>            “exact_value” : {<br>                “query” : “Quick Foxes!”<br>            }<br>        }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### slop参数：</span><br><span class="line">- 告诉match_phrase查询词条能够相隔多远时仍然将文档视为匹配</span><br><span class="line">- 相隔多远的意思是，你需要移动一个词条多少次来让查询和文档匹配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 为了让查询quick fox能够匹配含有quick brown fox的文档，我们需要slop的值为1：</span><br></pre></td></tr></table></figure></p><pre><code>            Pos 1         Pos 2         Pos 3-----------------------------------------------Doc:        quick         brown         fox-----------------------------------------------Query:      quick         foxSlop 1:     quick                 ↳     fox<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 为了让fox quick查询能够匹配我们的文档，需要slop的值为3：</span><br></pre></td></tr></table></figure>            Pos 1         Pos 2         Pos 3-----------------------------------------------Doc:        quick         brown         fox-----------------------------------------------Query:      fox           quickSlop 1:     fox|quick  ↵  Slop 2:     quick      ↳  foxSlop 3:     quick                 ↳     fox<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>GET my_index/my_type/_search{  &quot;query&quot;: {        &quot;match_phrase&quot;: {            &quot;full_text&quot; : {                &quot;query&quot; : &quot;foxes quick&quot;,                &quot;slop&quot; : 3            }        }  }}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 尽管在使用了slop的短语匹配中，所有的单词都需要出现，但是单词的出现顺序可以不同。如果slop的值足够大，那么单词的顺序可以是任意的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## bool 联合查询</span><br><span class="line">- must: 文档必须完全匹配条件</span><br><span class="line">- should: should下面会带一个以上的条件，至少满足一个条件，这个文档就符合should</span><br><span class="line">- 如果没有 must 条件，那么 should 中必须至少匹配一个。我们也还可以通过 minimum_should_match 来限制它匹配更多个。</span><br><span class="line">- must_not: 文档必须不匹配条件</span><br></pre></td></tr></table></figure></code></pre><p>GET /cars/transactions/_search<br>{<br>    “query”: {<br>        “bool”: {<br>            “must”: {<br>                “term”: {<br>                    “color”: “red”<br>                }<br>            },<br>            “must_not”: {<br>                “term”: {<br>                    “make”: “bmw”<br>                }<br>            },<br>            “filter”: {<br>                “range”: {<br>                    “price”: {<br>                        “gt”: 10000<br>                    }<br>                }<br>            }<br>        }<br>    }<br>}<br><code>`</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://elasticsearch.cn/article/142" target="_blank" rel="noopener">Elasticsearch Suggester详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于DSL&quot;&gt;&lt;a href=&quot;#关于DSL&quot; class=&quot;headerlink&quot; title=&quot;关于DSL&quot;&gt;&lt;/a&gt;关于DSL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;es中的查询请求有两种方式:&lt;ul&gt;
&lt;li&gt;一种是简易版的查询，像传递URL参数一样去传递查询语句&lt;u
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】6.IK-analyzer 教程</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/6.IK-analyzer%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/6.IK-analyzer教程/</id>
    <published>2018-05-11T08:54:40.711Z</published>
    <updated>2018-05-11T09:02:09.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。</li><li>IKAnalyzer3.0特性:<ul><li>采用了特有的“正向迭代最细粒度切分算法“，支持细粒度和最大词长两种切分模式；具有83万字/秒（1600KB/S）的高速处理能力。</li><li>采用了多子处理器分析模式，支持：英文字母、数字、中文词汇等分词处理，兼容韩文、日文字符</li><li>优化的词典存储，更小的内存占用。支持用户词典扩展定义</li><li>针对Lucene全文检索优化的查询分析器IKQueryParser(作者吐血推荐)；引入简单搜索表达式，采用歧义分析算法优化查询关键字的搜索排列组合，能极大的提高Lucene检索的命中率。</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="解压包方式"><a href="#解压包方式" class="headerlink" title="解压包方式"></a>解压包方式</h3><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">官网下载地址</a></li><li><p>进入 Elasticsearch 插件目录：<figure class="highlight plain"><figcaption><span>/usr/workspace/elasticsearch-6.2.3/plugins```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 上传压缩包并解压：```unzip elasticsearch-analysis-ik-6.2.3.zip</span><br></pre></td></tr></table></figure></p></li><li><p>重启Elasticsearch</p></li></ul><h3 id="联网方式"><a href="#联网方式" class="headerlink" title="联网方式"></a>联网方式</h3><ul><li><p>进入节点目录，输入命令：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.3/elasticsearch-analysis-ik-6.2.3.zip</span><br></pre></td></tr></table></figure></li><li><p>重启Elasticsearch</p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>创建一个新索引</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /ik</span><br></pre></td></tr></table></figure></li><li><p>添加一个Mapping，并设定其使用【IK】分词器，<strong>必须在往索引中添加数据前完成</strong></p><blockquote><p> Mapping，就是对索引库中索引的字段名称及其数据类型进行定义，类似于mysql中的表结构信息。不过es的mapping比数据库灵活很多，它可以动态识别字段。一般不需要指定mapping都可以，因为es会自动根据数据格式识别它的类型，如果你需要对某些字段添加特殊属性（如：定义使用其它分词器、是否分词、是否存储等），就必须手动添加mapping。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /ik/message/_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;fieldname&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">            &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p> ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；<br> ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”。</p></blockquote><ol start="3"><li><p>添加一些文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /ik/message/1 </span><br><span class="line">&#123;</span><br><span class="line">    &quot;content&quot;:&quot;这是一条IK Analyzer测试文档&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>带高亮查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://localhost:9200/indexname/typename/_search -H &apos;Content-Type:application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;content&quot; : &quot;这是&quot; &#125;&#125;,</span><br><span class="line">    &quot;highlight&quot; : &#123;</span><br><span class="line">        &quot;pre_tags&quot; : [&quot;&lt;tag1&gt;&quot;, &quot;&lt;tag2&gt;&quot;],</span><br><span class="line">        &quot;post_tags&quot; : [&quot;&lt;/tag1&gt;&quot;, &quot;&lt;/tag2&gt;&quot;],</span><br><span class="line">        &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;content&quot; : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>返回内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 17,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 0.2876821,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;indexname&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;typename&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 0.2876821,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;content&quot;: &quot;这是一条IK Analyzer测试文档&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;highlight&quot;: &#123;</span><br><span class="line">          &quot;content&quot;: [</span><br><span class="line">            &quot;&lt;tag1&gt;这是&lt;/tag1&gt;一条IK Analyzer测试文档&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>IK配置文件目录位于{conf}/analysis-ik/config 或 {plugins}/elasticsearch-analysis-ik-6.2.3/config，其中：<ul><li>IKAnalyzer.cfg.xml：用来配置自定义词库</li><li>main.dic：ik原生内置的中文词库，总共有27万多条，只要是这些单词，都会被分在一起</li><li>quantifier.dic：放了一些单位相关的词</li><li>suffix.dic：放了一些后缀</li><li>surname.dic：中国的姓氏</li><li>stopword.dic：英文停用词</li></ul></li></ul><h2 id="字典配置"><a href="#字典配置" class="headerlink" title="字典配置"></a>字典配置</h2><ul><li>IK配置文件位于{conf}/analysis-ik/config/IKAnalyzer.cfg.xml 或 {plugins}/elasticsearch-analysis-ik-6.2.3/config/IKAnalyzer.cfg.xml</li><li><p>内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</span><br><span class="line">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="line">&lt;entry key=&quot;ext_dict&quot;&gt;custom/mydict.dic;custom/single_word_low_freq.dic&lt;/entry&gt;</span><br><span class="line"> &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="line">&lt;entry key=&quot;ext_stopwords&quot;&gt;custom/ext_stopword.dic&lt;/entry&gt;</span><br><span class="line"> &lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="line">&lt;entry key=&quot;remote_ext_dict&quot;&gt;location&lt;/entry&gt;</span><br><span class="line"> &lt;!--用户可以在这里配置远程扩展停用词字典--&gt;</span><br><span class="line">&lt;entry key=&quot;remote_ext_stopwords&quot;&gt;http://xxx.com/xxx.dic&lt;/entry&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://baike.baidu.com/item/%E5%81%9C%E7%94%A8%E8%AF%8D/4531676?fr=aladdin" target="_blank" rel="noopener">停用词</a></p><ul><li>停用词是指在信息检索中，为节省存储空间和提高搜索效率，在处理自然语言数据（或文本）之前或之后会自动过滤掉某些字或词</li><li>通常意义上，停用词大致分为两类。<ul><li>一类是人类语言中包含的功能词，这些功能词极其普遍，与其他词相比，功能词没有什么实际含义，比如’the’、’is’、’at’、’which’、’on’等。</li><li>另一类词包括词汇词，比如’want’等，这些词应用十分广泛，但是对这样的词搜索引擎无法保证能够给出真正相关的搜索结果，难以帮助缩小搜索范围，同时还会降低搜索的效率，所以通常会把这些词从问题中移去，从而提高搜索性能。</li></ul></li></ul></li></ul><h2 id="热更新-IK-分词"><a href="#热更新-IK-分词" class="headerlink" title="热更新 IK 分词"></a>热更新 IK 分词</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>通过修改上述配置文件的以下两个标签可实现热更新 IK 分词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="line">&lt;entry key=&quot;remote_ext_dict&quot;&gt;location&lt;/entry&gt;</span><br><span class="line">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="line">&lt;entry key=&quot;remote_ext_stopwords&quot;&gt;location&lt;/entry&gt;</span><br></pre></td></tr></table></figure></li><li><p>其中 location 是指一个 url，比如 <a href="http://yoursite.com/getCustomDict，该请求只需满足以下两点即可完成分词热更新。" target="_blank" rel="noopener">http://yoursite.com/getCustomDict，该请求只需满足以下两点即可完成分词热更新。</a></p><ol><li>该 http 请求需要返回两个头部(header)，一个是 Last-Modified，一个是 ETag，这两者都是字符串类型，只要有一个发生变化，该插件就会去抓取新的分词进而更新词库。</li><li>该 http 请求返回的内容格式是一行一个分词，换行符用 \n 即可。</li></ol></li><li>满足上面两点要求就可以实现热更新分词了，不需要重启 ES 实例。<blockquote><p> 可以将需自动更新的热词放在一个 UTF-8 编码的 .txt 文件里，放在 nginx 或其他简易 http server 下，当 .txt 文件修改时，http server 会在客户端请求该文件时自动返回相应的 Last-Modified 和 ETag。可以另外做一个工具来从业务系统提取相关词汇，并更新这个 .txt 文件。</p></blockquote></li></ul><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul><li><p>IK 分词测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;抖音&quot;,</span><br><span class="line">&quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;抖&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 0,</span><br><span class="line">      &quot;end_offset&quot;: 1,</span><br><span class="line">      &quot;type&quot;: &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;音&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 1,</span><br><span class="line">      &quot;end_offset&quot;: 2,</span><br><span class="line">      &quot;type&quot;: &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可见 IK 的主词典中没有“抖音”这个词，所以被拆分了</p></li><li>修改 IK 的配置文件 IKAnalyzer.cfg.xml <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;  </span><br><span class="line">&lt;properties&gt;  </span><br><span class="line">    &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</span><br><span class="line">    &lt;!--用户可以在这里配置自己的扩展字典 --&gt;    </span><br><span class="line">    &lt;entry key=&quot;ext_dict&quot;&gt;custom/mydict.dic;custom/single_word_low_freq.dic&lt;/entry&gt;     </span><br><span class="line">     &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="line">    &lt;entry key=&quot;ext_stopwords&quot;&gt;custom/ext_stopword.dic&lt;/entry&gt;</span><br><span class="line">    &lt;!--用户可以在这里配置远程扩展字典 --&gt; </span><br><span class="line">    &lt;entry key=&quot;remote_ext_dict&quot;&gt;http://192.168.75.128/MyIKCustomWords.php&lt;/entry&gt;</span><br><span class="line">    &lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="line">    &lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="PHP方式"><a href="#PHP方式" class="headerlink" title="PHP方式"></a>PHP方式</h3><ul><li><p><a href="https://jingyan.baidu.com/article/a3f121e4b0dd75fc9052bbc6.html" target="_blank" rel="noopener">CentOS7.0 PHP环境搭建</a></p></li><li><p>在 PHP 应用目录加入MyIKCustomWords.php</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo </span><br><span class="line">&apos;抖音</span><br><span class="line">&apos;;</span><br><span class="line">header(&apos;Last-Modified: &apos;.gmdate(&apos;D, d M Y H:i:s&apos;, time()).&apos; GMT&apos;, true, 200);</span><br><span class="line">header(&apos;ETag: &quot;5816f349-19&quot;&apos;);</span><br><span class="line">echo $s;</span><br><span class="line">﻿?&gt;</span><br></pre></td></tr></table></figure></li><li><p>重新启动Elasticsearch</p></li><li><p>可见启动过程有以下输出</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[2018-04-13T13:42:45,349][INFO ][o.w.a.d.Monitor          ] 重新加载词典...</span><br><span class="line">[2018-04-13T13:42:45,349][INFO ][o.w.a.d.Monitor          ] try load config from /usr/workspace/elasticsearch-6.2.3/master/config/analysis-ik/IKAnalyzer.cfg.xml</span><br><span class="line">[2018-04-13T13:42:45,620][WARN ][o.w.a.d.Monitor          ] [Ext Loading] file not found: /usr/workspace/elasticsearch-6.2.3/master/config/analysis-ik/custom/mydict.dic</span><br><span class="line">[2018-04-13T13:42:45,621][WARN ][o.w.a.d.Monitor          ] [Ext Loading] file not found: /usr/workspace/elasticsearch-6.2.3/master/config/analysis-ik/custom/single_word_low_freq.dic</span><br><span class="line">[2018-04-13T13:42:45,621][INFO ][o.w.a.d.Monitor          ] [Dict Loading] http://192.168.75.128/MyIKCustomWords.php</span><br><span class="line">[2018-04-13T13:42:45,677][INFO ][o.w.a.d.Monitor          ] 抖音</span><br><span class="line">[2018-04-13T13:42:45,678][WARN ][o.w.a.d.Monitor          ] [Ext Loading] file not found: /usr/workspace/elasticsearch-6.2.3/master/config/analysis-ik/custom/ext_stopword.dic</span><br><span class="line">[2018-04-13T13:42:45,678][INFO ][o.w.a.d.Monitor          ] 重新加载词典完毕...</span><br></pre></td></tr></table></figure></li><li><p>再次进行分词</p></li><li>返回数据  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;抖音&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 0,</span><br><span class="line">      &quot;end_offset&quot;: 2,</span><br><span class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol><li>配置远程扩展词典后启动 Elasticsearch 出现异常　<figure class="highlight plain"><figcaption><span>access denied (java.net.SocketPermission 192.168.75.128:80 connect,resolve)```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;  无法解析和连接到127.0.0.1的2005端口上，原因是在PerfectTime中设置了安全管理器＜System.setSecurityManager(new RMISecurityManager());＞，可是又没有设置访问的策略</span><br><span class="line"></span><br><span class="line">- 解决方法</span><br><span class="line">- 打开文件 ../jdk*/jre/lib/security/java.policy</span><br><span class="line">- 修改安全策略文件，在grant &#123;&#125; 大括号中加上</span><br><span class="line">```permission java.net.SocketPermission &quot;localhost:2005&quot;,&quot;connect,resolve&quot;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="MYSQL方式"><a href="#MYSQL方式" class="headerlink" title="MYSQL方式"></a>MYSQL方式</h3><p><a href="https://github.com/judasn/Elasticsearch-Tutorial-zh-CN/tree/master/elasticsearch-analysis-ik-5.2.0" target="_blank" rel="noopener">https://github.com/judasn/Elasticsearch-Tutorial-zh-CN/tree/master/elasticsearch-analysis-ik-5.2.0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。&lt;/li&gt;
&lt;li&gt;IKAnalyzer3.0特
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
      <category term="IK-analyzer" scheme="http://blog.shaib.cn/tags/IK-analyzer/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】5.批量操作</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/5.%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/5.批量操作/</id>
    <published>2018-05-11T08:54:40.706Z</published>
    <updated>2018-05-11T09:01:39.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>批量操作好处<ul><li>可以减少大量的网络开销和连接资源</li><li>bulk API 允许在单个步骤中进行多次 create 、 index 、 update 或 delete 请求</li></ul></li><li></li></ul><h2 id="请求体格式"><a href="#请求体格式" class="headerlink" title="请求体格式"></a>请求体格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; action: &#123; metadata &#125;&#125;\n ## 指定 哪一个文档 做 什么操作</span><br><span class="line">&#123; request body        &#125;\n</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body        &#125;\n</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>action 必须是以下选项之一:<ul><li>create：如果文档不存在，那么就创建它</li><li>index：创建一个新文档或者替换一个现有的文档</li><li>update：部分更新一个文档</li><li>delete：删除一个文档</li></ul></li></ul><h2 id="mget-批量查询"><a href="#mget-批量查询" class="headerlink" title="mget 批量查询"></a>mget 批量查询</h2><ul><li><p>不同 index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;cars&quot;,</span><br><span class="line">      &quot;_type&quot;: &quot;transactions&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;Am8kzWIBWwL7t5InLKFv&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;blogs&quot;,</span><br><span class="line">      &quot;_type&quot;: &quot;tech&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;WuqhAGMBpX-3-f32mmQT&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相同 index，相同 type，不同 ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /blogs/tech/_mget</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ids&quot;:[&quot;WuqhAGMBpX-3-f32mmQT&quot;, &quot;XOqhAGMBpX-3-f32mmQT&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="批量增删改"><a href="#批量增删改" class="headerlink" title="批量增删改"></a>批量增删改</h2><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><ul><li><p>不同 index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;cars&quot;, &quot;_type&quot; : &quot;transactions&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;price&quot; : 10000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-10-28&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;blogs&quot;, &quot;_type&quot; : &quot;tech&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;body&quot;: &quot;Elasticsearch builds on top of lucene&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>相同 index，相同 type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /cars/transactions/_bulk</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 10000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-10-28&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 20000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-11-05&quot; &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;&quot;delete&quot;: &#123;&quot;_index&quot;: &quot;cars&quot;,&quot;_type&quot;: &quot;transactions&quot;,&quot;_id&quot;: &quot;Am8kzWIBWwL7t5InLKFv&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>请注意 <strong>delete 动作不能有请求体</strong>，它后面跟着的是另外一个操作</li></ul><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_index&quot;: &quot;cars&quot;,&quot;_type&quot;: &quot;transactions&quot;,&quot;_id&quot;: &quot;Am8kzWIBWwL7t5InLKFv&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 25000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-11-05&quot; &#125;</span><br></pre></td></tr></table></figure><ul><li>可以是多个 JSON 组合起来，按 JSON 顺序执行</li><li><strong>每个 json 内部不能换行，多个 json 之间必须换行</strong></li><li>顺序执行过程中，前面的操作失败，不会影响后续的操作</li><li>kibana Dev Tools 可能会提示语法有错误，但是不影响操作</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;批量操作好处&lt;ul&gt;
&lt;li&gt;可以减少大量的网络开销和连接资源&lt;/li&gt;
&lt;li&gt;bulk API 允许在单个步骤中进行多次 c
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】4.索引管理、文档操作</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/4.%E7%B4%A2%E5%BC%95%E7%AE%A1%E7%90%86%E3%80%81%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/4.索引管理、文档操作/</id>
    <published>2018-05-11T08:54:40.701Z</published>
    <updated>2018-05-11T09:01:29.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h2><ul><li>可以使用 Kibana 的 Dev Tools 执行命令</li><li>可以根据光标单独执行某一条命令<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/TzTvhpO.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li>常用索引指令<ul><li>查看集群健康状况：GET /_cat/health?v</li><li>查询集群中有哪些索引：GET /_cat/indices?v</li></ul></li><li>简单的索引操作：<ul><li>添加索引（默认配置）：PUT /user_index</li><li>删除单个索引：DELETE /user_index</li><li>删除多个索引：DELETE /user1_index,user2_index</li><li>根据通配符删除多个索引：DELETE /new_*</li><li>删除所有索引：DELETE /_all</li><li>查询索引配置信息：GET /user_index/_settings</li><li>查询多个索引配置信息：GET /user1_index,user2_index/_settings</li><li>查询所有索引配置信息：GET /_all/_settings</li></ul></li></ul><h5 id="添加索引（自定义设置）"><a href="#添加索引（自定义设置）" class="headerlink" title="添加索引（自定义设置）"></a>添加索引（自定义设置）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /user_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &#123;</span><br><span class="line">      &quot;number_of_shards&quot;: 5,  ## 分片数量</span><br><span class="line">      &quot;number_of_replicas&quot;: 1  ## 每个分片需要备份的数量</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>修改分片备份数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /user_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;number_of_replicas&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当出现有场外分片的情况下，需要对分片进行重分配</p><ul><li>分片重分配默认是开启的，但是可能因为某些原因关闭了重分配但是忘记开启了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123; </span><br><span class="line">    &quot;transient&quot;:&#123;</span><br><span class="line">        &quot;cluster.routing.allocation.enable&quot; : &quot;all&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="添加索引，同时设置-mapping"><a href="#添加索引，同时设置-mapping" class="headerlink" title="添加索引，同时设置 mapping"></a>添加索引，同时设置 mapping</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT /user_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;refresh_interval&quot;: &quot;5s&quot;,  ## 索引刷新频率</span><br><span class="line">    &quot;number_of_shards&quot;: 5,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;student&quot;: &#123;  ## 类型名称</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;student_name&quot;: &#123;  ## 字段名称</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,  ## 字段类型</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,  ## 设置分词器</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapping 可以理解为数据库中的表结构，比如设置字段的类型、默认值、是否为空等参数</li></ul><h5 id="先添加索引再设置-mapping"><a href="#先添加索引再设置-mapping" class="headerlink" title="先添加索引再设置 mapping"></a>先添加索引再设置 mapping</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /user_index</span><br><span class="line"></span><br><span class="line">POST /user_index/student/_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;student_name&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">            &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h4 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h4><ul><li><p>PUT 方式添加文档（指定ID）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /user_index/student/1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;student_name&quot; : &quot;jun&quot;,</span><br><span class="line">    &quot;student_id&quot; : &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>POST 方式添加文档，不指向 ID 会自动生成一个 20 位的字符串 ID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /user_index/student</span><br><span class="line">&#123;</span><br><span class="line">    &quot;student_name&quot; : &quot;jun&quot;,</span><br><span class="line">    &quot;student_id&quot; : &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><ul><li><p>通过 ID 查询（默认返回所有元数据）：<figure class="highlight plain"><figcaption><span>/user_index/student/3```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 通过 ID 查询（返回指定元数据）：```GET /user_index/student/1?_source=student_name,student_id</span><br></pre></td></tr></table></figure></p></li><li><p>查询指定索引的所有数据：<figure class="highlight plain"><figcaption><span>/user_index/student/_search```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 设置查询超时：```GET /user_index/student/_search?timeout=5s</span><br></pre></td></tr></table></figure></p></li><li><p>查询多个索引：<figure class="highlight plain"><figcaption><span>/user_index/student/_search```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 查询多个索引、多个类型：```GET /user1_index,user2_index/student,teacher/_search</span><br></pre></td></tr></table></figure></p></li><li><p>查询所有索引、多个类型：<figure class="highlight plain"><figcaption><span>/_all/student,teacher/_search```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 通过通配符模糊查询多个索引：```GET /student_*/_search</span><br></pre></td></tr></table></figure></p></li><li><p>通过字段查询，并按学号倒序返回：<figure class="highlight plain"><figcaption><span>/user_index/student/_search?q</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 通过字段查询（使用减号代表不等于），并价格倒序：```GET /user_index/student/_search?q=-student_name:jun&amp;sort=student_id:desc</span><br></pre></td></tr></table></figure></p></li></ul><h5 id="普通分页查询："><a href="#普通分页查询：" class="headerlink" title="普通分页查询："></a>普通分页查询：</h5><ul><li><p>查询所有结果：<figure class="highlight plain"><figcaption><span>/user_index/student/_search```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 普通分页（查询第 1 页，每页 2 条数据）：```GET /user_index/student/_search?from=0&amp;size=2</span><br></pre></td></tr></table></figure></p></li><li><p><strong>from 是指从第几条数据开始</strong></p></li></ul><h5 id="深度分页：详见-8-深度分页"><a href="#深度分页：详见-8-深度分页" class="headerlink" title="深度分页：详见 8.深度分页"></a>深度分页：详见 <a href="8.深度分页.md">8.深度分页</a></h5><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-management.html" target="_blank" rel="noopener">官方文档：索引管理</a></li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html" target="_blank" rel="noopener">官方文档：数据输入和输出</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;索引管理&quot;&gt;&lt;a href=&quot;#索引管理&quot; class=&quot;headerlink&quot; title=&quot;索引管理&quot;&gt;&lt;/a&gt;索引管理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以使用 Kibana 的 Dev Tools 执行命令&lt;/li&gt;
&lt;li&gt;可以根据光标单独执行某一条命令&lt;fi
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】3.2 Kibana 安装配置和使用</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/3.2logstash%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/3.2logstash安装配置和使用/</id>
    <published>2018-05-11T08:54:40.696Z</published>
    <updated>2018-05-11T08:58:35.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>Logstash 是一个开源的<strong>数据收集引擎</strong>，它具有备实时数据传输能力。它可以统一过滤来自不同源的数据，并按照开发者的制定的规范输出到目的地。</li><li>顾名思义，Logstash 收集数据对象就是日志文件。由于日志文件来源多（如：系统日志、服务器 日志等），且内容杂乱，不便于人类进行观察。因此，我们可以使用 Logstash 对日志文件进行收集和统一过滤，变成可读性高的内容，方便开发者或运维人员观察，从而有效的分析系统/项目运行的性能，做好监控和预警的准备工作等。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="解压包方式"><a href="#解压包方式" class="headerlink" title="解压包方式"></a>解压包方式</h3><ul><li><a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">官网下载地址</a></li><li><p>解压</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf logstash-6.2.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改 config/kibana.yml文件：<figure class="highlight vim"><figcaption><span>/usr/workspace/kibana-6.2.3/config/kibana.yml```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 加入以下内容</span><br></pre></td></tr></table></figure></p><p>  #端口<br>  server.port: 5601<br>  #访问的IP地址<br>  server.host: “192.168.75.128”<br>  #es的地址<br>  elasticsearch.url: “http://:9200”<br>  #kibana在es中的索引<br>  kibana.index: “.kibana” </p><p>  #X-Pack账号密码，可在elasticsearch.yml配置关闭（详见Elasticsearch安装部署和使用.md）<br>  elasticsearch.username: “elastic”<br>  elasticsearch.password: “123456”  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Docker 方式</span><br><span class="line"></span><br><span class="line">- 拉取镜像</span><br></pre></td></tr></table></figure></li></ul><p>docker pull docker.elastic.co/logstash/logstash:6.2.3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 启动Kibana</span><br></pre></td></tr></table></figure></p><p>docker run -v /usr/local/logstash/conf.d:/usr/share/logstash/pipeline/:ro -v /tmp:/tmp:ro \<br>-v /usr/local/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro –name my-logstash \<br>docker.elastic.co/logstash/logstash:6.2.3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 启动 </span><br><span class="line">### 测试启动</span><br><span class="line">- 输入命令：```bin/logstash -e &apos;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123; codec =&gt; rubydebug &#125; &#125;&apos;</span><br></pre></td></tr></table></figure></p><ul><li>再次输入 hello world 回车，返回结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2018-04-12T09:39:23.912Z,  </span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.75.128&quot;,  </span><br><span class="line">       &quot;message&quot; =&gt; &quot;hello world&quot;,  </span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="加载配置文件启动"><a href="#加载配置文件启动" class="headerlink" title="加载配置文件启动"></a>加载配置文件启动</h3><ul><li><p>启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/logstash.conf</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/judasn/Linux-Tutorial/blob/master/markdown-file/Logstash-Base.md" target="_blank" rel="noopener">配置文件详解</a></p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="https://github.com/judasn/Linux-Tutorial/blob/master/markdown-file/Logstash-Base.md" target="_blank" rel="noopener">https://github.com/judasn/Linux-Tutorial/blob/master/markdown-file/Logstash-Base.md</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Logstash 是一个开源的&lt;strong&gt;数据收集引擎&lt;/strong&gt;，它具有备实时数据传输能力。它可以统一过滤来自不同源
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
      <category term="ELK" scheme="http://blog.shaib.cn/tags/ELK/"/>
    
      <category term="Logstash" scheme="http://blog.shaib.cn/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】3.1 Kibana 安装配置和使用</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/3.1Kibana%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/3.1Kibana安装配置和使用/</id>
    <published>2018-05-11T08:54:40.692Z</published>
    <updated>2018-05-11T08:58:09.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>Kibana是一个开源的分析与可视化平台，设计出来用于和Elasticsearch一起使用的。你可以用kibana搜索、查看、交互存放在Elasticsearch索引里的数据，使用各种不同的图表、表格、地图等kibana能够很轻易地展示高级数据分析与可视化。</li><li>Kibana让我们理解大量数据变得很容易。它简单、基于浏览器的接口使你能快速创建和分享实时展现Elasticsearch查询变化的动态仪表盘。安装Kibana非常快，你可以在几分钟之内安装和开始探索你的Elasticsearch索引数据，不需要写任何代码，没有其他基础软件依赖。</li><li><a href="https://www.elastic.co/guide/en/kibana/index.html" target="_blank" rel="noopener">官网地址</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="解压包方式"><a href="#解压包方式" class="headerlink" title="解压包方式"></a>解压包方式</h3><ul><li><a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">官网下载地址</a></li><li><p>解压</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kibana-6.2.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改 config/kibana.yml 文件：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## 端口  </span><br><span class="line">server.port: 5601  </span><br><span class="line">## 访问的IP地址</span><br><span class="line">server.host: &quot;192.168.75.128&quot; </span><br><span class="line">## es的地址  </span><br><span class="line">elasticsearch.url: &quot;http://192.168.75.128:9200&quot;  </span><br><span class="line">## kibana在es中的索引  </span><br><span class="line">kibana.index: &quot;.kibana&quot; </span><br><span class="line"></span><br><span class="line">## X-Pack 账号密码，可在elasticsearch.yml配置关闭（详见 2.Elasticsearch安装部署和使用.md）</span><br><span class="line">elasticsearch.username: &quot;elastic&quot;</span><br><span class="line">elasticsearch.password: &quot;123456&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul><li>先切换至 elastic 用户，启动 Elasticsearch</li><li>切换回 root 用户</li><li><p>前台启动，不能关闭终端，且启动速度较慢：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 后台启动：```/usr/workspace/kibana-6.2.3/bin/kibana -d```  </span><br><span class="line">- 关闭后台：```ps -ef|grep kibana</span><br></pre></td></tr></table></figure></p></li><li><p>进入 <a href="http://192.168.75.128:5601" target="_blank" rel="noopener">http://192.168.75.128:5601</a> ，即可进入 Kibana 界面</p></li></ul><h3 id="Docker方式"><a href="#Docker方式" class="headerlink" title="Docker方式"></a>Docker方式</h3><ul><li><p>拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/kibana/kibana:6.2.3</span><br></pre></td></tr></table></figure></li><li><p>启动Kibana</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 5601:5601 -e &quot;ELASTICSEARCH_URL=http://localhost:9200&quot; \</span><br><span class="line">-v /usr/local/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml \</span><br><span class="line">--name my-kibana docker.elastic.co/kibana/kibana:6.2.3</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><strong>Discover</strong>：从发现页可以交互地探索ES的数据。可以访问与所选索引模式相匹配的每一个索引中的每一个文档。您可以提交搜索查询、筛选搜索结果和查看文档数据。还可以看到匹配搜索查询和获取字段值统计的文档的数量。如果一个时间字段被配置为所选择的索引模式，则文档的分布随着时间的推移显示在页面顶部的直方图中。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/9Lxwidu.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li><strong>Visualize</strong>：可视化能使你创造你的Elasticsearch指标数据的可视化。然后你可以建立仪表板显示相关的可视化。Kibana的可视化是基于Elasticsearch查询。通过一系列的Elasticsearch聚合提取和处理您的数据，您可以创建图表显示你需要知道的关于趋势，峰值和骤降。您可以从搜索保存的搜索中创建可视化或从一个新的搜索查询开始。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/m7qoZXA.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li><strong>Dashboard</strong>：一个仪表板显示Kibana保存的一系列可视化。你可以根据需要安排和调整可视化，并保存仪表盘，可以被加载和共享。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/we2xc50.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li><strong>Timelion</strong>：Timelion是一个时间序列数据的可视化，可以结合在一个单一的可视化完全独立的数据源。它是由一个简单的表达式语言驱动的，你用来检索时间序列数据，进行计算，找出复杂的问题的答案，并可视化的结果。这个功能由一系列的功能函数组成，同样的查询的结果，也可以通过Dashboard显示查看。<ul><li><a href="https://blog.csdn.net/bsh_csn/article/details/54341085" target="_blank" rel="noopener">Timelion 基本语法</a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/sZKohIR.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul></li></ul><ul><li><strong>Management</strong>：管理中的应用是在你执行你的运行时配置kibana，包括初始设置和指标进行配置模式，高级设置，调整自己的行为和Kibana，各种“对象”，你可以查看保存在整个Kibana的内容如发现页，可视化和仪表板。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/nUvGEJd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><ul><li><strong>Dev Tools</strong>：原先的交互式控制台Sense，使用户方便的通过浏览器直接与Elasticsearch进行交互。从Kibana 5开始改名并直接内建在Kibana，就是Dev Tools选项。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/CP5hHkD.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Kibana是一个开源的分析与可视化平台，设计出来用于和Elasticsearch一起使用的。你可以用kibana搜索、查看、交
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
      <category term="Kibana" scheme="http://blog.shaib.cn/tags/Kibana/"/>
    
      <category term="ELK" scheme="http://blog.shaib.cn/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】3.0 X-Pack 安装和使用</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/3.0X-Pack%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/3.0X-Pack安装和使用/</id>
    <published>2018-05-11T08:54:40.688Z</published>
    <updated>2018-05-11T09:07:44.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>安装X-Pack之前需要安装Elasticsearch、logstash和Kibana（ELK环境）</p></li><li><p><a href="./3.1Kibana安装配置和使用.md">Kibana 安装配置和使用</a></p></li><li><p><a href="3.2logstash安装配置和使用.md">logstash 安装配置和使用</a></p></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>X-pack监控组件使你可以通过 Kibana 轻松地监控 ElasticSearch。您可以实时查看集群的健康和性能，以及分析过去的集群、索引和节点度量。此外，您可以监视 Kibana 本身性能。当你安装 X-pack 在群集上，监控代理运行在每个节点上收集和指数指标从 Elasticsearch。安装在 X-pack 在 Kibana 上，您可以查看通过一套专门的仪表板监控数据。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2018.cnblogs.com/blog/820881/201802/820881-20180224113750938-1915984861.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Elasticsearch-上安装-X-Pack"><a href="#Elasticsearch-上安装-X-Pack" class="headerlink" title="Elasticsearch 上安装 X-Pack"></a>Elasticsearch 上安装 X-Pack</h2><ul><li>所有节点都需要安装<h4 id="联网方式安装"><a href="#联网方式安装" class="headerlink" title="联网方式安装"></a>联网方式安装</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-plugin install x-pack</span><br></pre></td></tr></table></figure></li></ul><h4 id="解压包安装"><a href="#解压包安装" class="headerlink" title="解压包安装"></a>解压包安装</h4><pre><code>- [官网下载地址](https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-6.2.3.zip)- 执行命令安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-plugin install file:///usr/local/software/x-pack-6.2.1.zip</span><br></pre></td></tr></table></figure>- 安装过程需要输入两次&apos;y&apos;，允许发送电子邮件通知，启动机器学习分析引擎等</code></pre><ul><li><p>卸载</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-plugin remove x-pack</span><br></pre></td></tr></table></figure></li><li><p>关闭登陆密码</p><ul><li>在 elasticsearch.yml 中加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: false</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Kibana上安装X-Pack"><a href="#Kibana上安装X-Pack" class="headerlink" title="Kibana上安装X-Pack"></a>Kibana上安装X-Pack</h2><ul><li><p>联网方式安装</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kibana-plugin install x-pack</span><br></pre></td></tr></table></figure></li><li><p>解压包安装</p><ul><li><a href="https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-6.2.3.zip" target="_blank" rel="noopener">官网下载地址</a></li><li><p>执行命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kibana-plugin install file:///path/to/file/x-pack-6.2.3.zip</span><br></pre></td></tr></table></figure></li><li><p>在 kibana.yml 中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.username: &quot;elastic&quot;  </span><br><span class="line">elasticsearch.password: &quot;123456&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p><strong>Monitoring</strong>：默认Kibana是没有该选项的。其实，Monitoring是由X-Pack集成提供的。该X-pack监控组件使您可以通过Kibana轻松地监控ElasticSearch。您可以实时查看集群的健康和性能，以及分析过去的集群、索引和节点度量。此外，您可以监视Kibana本身性能。当你安装X-pack在群集上，监控代理运行在每个节点上收集和指数指标从Elasticsearch。安装在X-pack在Kibana上，您可以查看通过一套专门的仪表板监控数据。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/sS9ZfnU.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p><strong>Graph</strong>：X-Pack图的能力使你发现一个Elasticsearch索引项是如何相关联的。你可以探索索引条款之间的连接，看看哪些连接是最有意义的。从欺诈检测到推荐引擎，对各种应用中这都是有用的，例如，图的探索可以帮助你发现网站上黑客的目标的漏洞，所以你可以硬化你的网站。或者，您可以为您的电子商务客户提供基于图表的个性化推荐。X-pack提供简单，但功能强大的图形开发API，和Kibana交互式图形可视化工具。使用X-pack图有工作与开销与现有Elasticsearch指标你不需要任何额外的数据存储的特征。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/DGOd1Pg.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装X-Pack之前需要安装Elasticsearch、logstash和Kibana（ELK环境）&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
      <category term="Kibana" scheme="http://blog.shaib.cn/tags/Kibana/"/>
    
      <category term="X-Pack" scheme="http://blog.shaib.cn/tags/X-Pack/"/>
    
      <category term="ELK" scheme="http://blog.shaib.cn/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】2.Elasticsearch 安装部署</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/2.Elasticsearch%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/2.Elasticsearch安装部署/</id>
    <published>2018-05-11T08:54:40.683Z</published>
    <updated>2018-05-11T08:56:28.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Elasticsearch 需要 JAVA8 环境<ul><li>CentOS7.4 已自带</li><li><a href="http://www.cnblogs.com/hunttown/p/5450463.html" target="_blank" rel="noopener">检测与安装方法</a></li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="解压包方式"><a href="#解压包方式" class="headerlink" title="解压包方式"></a>解压包方式</h3><ol><li><p>下载解压包</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.3.tar.gz</span><br></pre></td></tr></table></figure><ul><li>或者从<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">官网</a>中下载相应的压缩包，使用ftp上传至服务器进行解压缩安装</li></ul></li><li><p>因为 Elasticsearch 高版本不建议使用 root 用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 创建elastic用户组</span><br><span class="line">[root@jun ~]# groupadd elastic</span><br><span class="line"></span><br><span class="line">## 创建用户elastic</span><br><span class="line">## useradd elastic（用户名） -g elastic（组名） -p 123456（密码）</span><br><span class="line">[root@jun ~]# useradd elastic -g elastic -p 123456</span><br></pre></td></tr></table></figure></li><li><p>解压到当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-6.2.3.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>将Elasticsearch移动到/usr/local/elasticsearch目录之中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv elasticsearch-6.2.3 /usr/local/elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>添加权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R elastic /usr/local/elasticsearch/elasticsearch-6.2.3</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：进入 /usr/local/elasticsearch/config 目录，使用 vi 编辑器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi elasticsearch.yml</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><a href="https://blog.csdn.net/futudeniaodan/article/details/52798950" target="_blank" rel="noopener">elasticsearch.yml 配置文件详解</a></p><ul><li><p>master节点配置参考：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: master</span><br><span class="line"></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line"></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line"></span><br><span class="line">xpack.security.enabled: false</span><br><span class="line"></span><br><span class="line">bootstrap.memory_lock: true</span><br></pre></td></tr></table></figure></li><li><p>非master节点配置参考：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: node1</span><br><span class="line"></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9201</span><br><span class="line"></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">node.master: false</span><br><span class="line">node.data: true</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.75.128&quot;]</span><br><span class="line"></span><br><span class="line">xpack.security.enabled: false</span><br><span class="line"></span><br><span class="line">bootstrap.memory_lock: true</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="7"><li><p>使用vi编辑器，修改 /etc/sysctl.conf 文件，添加如下代码(若无将会出现下面常见问题2)：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=262144</span><br></pre></td></tr></table></figure><ul><li>退出保存后执行如下命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用vi编辑器，修改/etc/security/limits.conf文件，在文件末尾添加如下代码(若无将会出现下面常见问题3):</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># elastic 为登录服务器的用户名</span><br><span class="line"></span><br><span class="line">elastic soft nofile 65536</span><br><span class="line">elastic hard nofile 65536</span><br><span class="line">elastic soft nproc  4096</span><br><span class="line">elastic hard nproc  4096</span><br></pre></td></tr></table></figure><ul><li>修改退出保存之后，切记需要退出重新登录，配置才能生效</li></ul></li><li><p>启动Elasticsearch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>查看集群状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:9200/_cat/health</span><br><span class="line"></span><br><span class="line">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">   1475871424 16:17:04  elasticsearch green           1         1      5   5    0    0        0             0                  -                100.0%</span><br></pre></td></tr></table></figure></li></ol><h3 id="Docker方式"><a href="#Docker方式" class="headerlink" title="Docker方式"></a>Docker方式</h3><ul><li><p>拉取镜像</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:6.2.3</span><br></pre></td></tr></table></figure></li><li><p>创建容器（单机）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:6.2.3</span><br></pre></td></tr></table></figure></li><li><p>Docker Compose 集群</p><ul><li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/markdown-file/Docker-Install-And-Usage.md" target="_blank" rel="noopener">Docker Compose 安装方法及常用命令</a></li><li>docker-compose.yml 文件如下  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;2.2&apos;</span><br><span class="line">services:</span><br><span class="line">  elasticsearch1:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.3</span><br><span class="line">    container_name: elasticsearch1</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata1:/usr/share/elasticsearch/data</span><br><span class="line">      - /usr/local/elasticsearch-6.2.3/esconfig/master/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml # 挂载自定义配置文件</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line"></span><br><span class="line">  elasticsearch2:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.3</span><br><span class="line">    container_name: elasticsearch2</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata2:/usr/share/elasticsearch/data</span><br><span class="line">      - /usr/local/elasticsearch-6.2.3/esconfig/node1/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml # 挂载自定义配置文件</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  esdata1:</span><br><span class="line">      driver: local # /var/lib/docker/volumes</span><br><span class="line">  esdata2:</span><br><span class="line">      driver: local # /var/lib/docker/volumes</span><br><span class="line">networks:</span><br><span class="line">  esnet:</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li><p>can not run elasticsearch as root</p><ul><li>Elasticsearch 5.X 版本后不可用超级管理员运行Elasticsearch，切换其他账号即可</li></ul></li><li><p>max virutal memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><ul><li><p>使用vi编辑器，修改 /etc/sysctl.conf 文件，添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=262144</span><br></pre></td></tr></table></figure></li><li><p>退出保存后执行如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li></ul></li><li><p>max number of threads [3750] for user [xxx] is too low, increase to at least [4096]</p><ul><li><p>使用vi编辑器，修改/etc/security/limits.conf文件，在文件末尾添加如下代码(若无将会出现下面常见问题3):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># elastic 为登录服务器的用户名</span><br><span class="line"></span><br><span class="line">elastic soft nofile 65536</span><br><span class="line">elastic hard nofile 65536</span><br><span class="line">elastic soft nproc  4096</span><br><span class="line">elastic hard nproc  4096</span><br></pre></td></tr></table></figure></li><li><p>修改退出保存之后，切记需要退出重新登录，配置才能生效</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Elasticsearch 需要 JAVA8 环境&lt;ul&gt;
&lt;li&gt;CentOS7.4 已自带&lt;/li&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】1.Elasticsearch 基础知识</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/1.Elasticsearch%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/1.Elasticsearch基础知识/</id>
    <published>2018-05-11T08:54:40.680Z</published>
    <updated>2018-05-11T08:56:25.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch-是什么"><a href="#Elasticsearch-是什么" class="headerlink" title="Elasticsearch 是什么"></a>Elasticsearch 是什么</h2><h4 id="Elasticsearch-定义"><a href="#Elasticsearch-定义" class="headerlink" title="Elasticsearch 定义"></a>Elasticsearch 定义</h4><ul><li>官网：<ul><li>一个分布式的实时文档存储，每个字段都可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul></li><li>百度百科：ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 口，通过 HTTP 使用 JSON 进行数据索引。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</li><li>维基百科：企业搜索平台，目的是组织数据并使其易于获取。</li></ul><h4 id="Lucene-介绍"><a href="#Lucene-介绍" class="headerlink" title="Lucene 介绍"></a>Lucene 介绍</h4><ul><li>维基百科：Lucene 不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。在Java开发环境里Lucene是一个成熟的免费开放源代码工具；就其本身而论，Lucene是现在并且是这几年，最受欢迎的免费Java信息检索程序库。</li></ul><h4 id="Elasticsearch-历史"><a href="#Elasticsearch-历史" class="headerlink" title="Elasticsearch 历史"></a>Elasticsearch 历史</h4><ul><li><a href="https://www.jianshu.com/p/3d43616999d9" target="_blank" rel="noopener">Elasticsearch 的由来</a></li></ul><h4 id="国内外案例："><a href="#国内外案例：" class="headerlink" title="国内外案例："></a>国内外案例：</h4><ul><li><strong>GitHub</strong> 用它来搜索达20TB的海量数据，其中包括13亿文件和1300亿行的代码</li><li><strong>SoundCloud</strong> 使用它为1.8亿用户实时提供精确的音乐搜索服务</li><li><strong>百度</strong> 目前广泛使用 ElasticSearch 进行文本数据分析，覆盖百度内部20多个业务线，单集群最大100台机器，200个ES节点，每天导入大于30TB的数据。</li></ul><h2 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h2><ul><li><strong>索引 index</strong>：保存相关数据的地方，实际上是指向一个或者多个物理<strong>分片</strong>的逻辑命名空间</li><li><strong>分片 shards</strong>：一个底层的工作单元 ，它仅保存了全部数据中的一部分。一个分片是一个 Lucene 的实例，本身就是一个完整的搜索引擎。我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互<ul><li>主分片：索引内任意一个文档都归属于一个主分片，技术上来说最大能够存储 Integer.MAX_VALUE - 128 个文档</li><li>副本分片：只是一个主分片的拷贝。作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务</li></ul></li><li><strong><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/mapping.html" target="_blank" rel="noopener">类型 type</a></strong>：表示一类相似的文档，由 名称 和 映射 组成</li><li><strong>文档 document</strong>：被序列化成 JSON 并存储到 Elasticsearch 中的对象，有指定的唯一的ID</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/11952792-12f3dcad36697a41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="文档元数据"><a href="#文档元数据" class="headerlink" title="文档元数据"></a>文档元数据</h2><ul><li>_index：表示文档在哪存放，即索引。因共同的特性被分组到一起的文档集合</li><li>_type：文档表示的对象类别，即类型。一类相似的文档</li><li>_id：文档唯一标识，当它和 _index 以及 _type 组合就可以唯一确定 Elasticsearch 中的一个文档。创建文档时可以自己指定ID或者让 Elasticsearch 自动生成</li></ul><h2 id="集群-cluster"><a href="#集群-cluster" class="headerlink" title="集群 cluster"></a>集群 cluster</h2><ul><li>一个运行中的 Elasticsearch 实例称为一个<strong>节点</strong>，集群是由一个或者多个拥有相同 <strong>cluster.name</strong> 配置的节点组成，它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/cluster-health.html" target="_blank" rel="noopener">集群健康监控</a></li></ul><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><ul><li>elasticsearch 为分布式而生，而且它的设计隐藏了分布式本身的复杂性。Elasticsearch在分布式概念上做了很大程度上的透明化，Elasticsearch致力于隐藏分布式系统的复杂性。以下这些操作都是在底层自动完成的：<ul><li>将你的文档分区到不同的容器或者分片中，它们可以存在于一个或多个节点中。</li><li>将分片均匀的分配到各个节点，对索引和搜索做负载均衡。</li><li>冗余每一个分片，防止硬件故障造成的数据丢失。</li><li>将集群中任意一个节点上的请求路由到相应数据所在的节点。</li><li>无论是增加节点，还是移除节点，分片都可以做到无缝的扩展和迁移。</li></ul></li><li>横向扩展和纵向扩展<ul><li>Elasticsearch用于构建高可用和可扩展的系统。扩展的方式可以是购买更好的服务器（纵向扩展（ vertical scale or scaling up ））或者购买更多的服务器（ 横向扩展（ horizontal scaleor scaling out ））</li><li>Elasticsearch 虽然能从更强大的硬件中获得更好的性能，但是纵向扩展有它的局限性。真正的扩展应该是横向的，它通过增加节点来均摊负载和增加可靠性。</li></ul></li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ul><li>Elasticsearch 文档中的<strong>每个字段都将被索引</strong>并且可以被查询 。不仅如此，在简单查询时，Elasticsearch 可以使用所有这些索引字段，以惊人的速度返回结果。这是你永远不会考虑用传统数据库去做的一些事情。</li><li>它可以做到：<ul><li>在类似于 gender 或者 age 这样的字段上使用结构化查询，join_date 这样的字段上使用排序，就像SQL的结构化查询一样。</li><li><a href="./全文检索.md">全文检索</a>，找出所有匹配关键字的文档并按照相关性（relevance） 排序后返回结果。</li></ul></li></ul><h2 id="基于-http-协议"><a href="#基于-http-协议" class="headerlink" title="基于 http 协议"></a>基于 http 协议</h2><ul><li><p>基于 HTTP 协议，以 JSON 为数据交互格式的 RESTful API，其他所有程序语言都可以使用 RESTful API，通过 9200 端口的与 Elasticsearch 进行通信，你可以使用你喜欢的 WEB 客户端，事实上，如你所见，你甚至可以通过 curl 命令与 Elasticsearch 通信。</p></li><li><p>Elasticsearch官方提供了多种程序语言的客户端——Groovy，Javascript， .NET，PHP，Perl，Python，以及 Ruby——还有很多由社区提供的客户端和插件，所有这些可以在文档中找到。</p></li><li><p>向Elasticsearch发出的请求的组成部分与其它普通的HTTP请求是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">curl -X&lt;VERB&gt;&apos;&lt;PROTOCOL&gt;://&lt;HOST&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;&apos; -d&apos;&lt;BODY&gt;&apos;</span><br><span class="line">• VERB HTTP 方法：GET , POST , PUT , HEAD , DELETE</span><br><span class="line">• PROTOCOL http 或者 https 协议（只有在 Elasticsearch 前面有https代理的时候可用）</span><br><span class="line">• HOST Elasticsearch集群中的任何一个节点的主机名，如果是在本地的节点，那么就叫localhost</span><br><span class="line">• PORT Elasticsearch HTTP服务所在的端口，默认为9200</span><br><span class="line">• QUERY_STRING 一些可选的查询请求参数，例如 ?pretty 参数将使请求返回更加美观易读的JSON数据</span><br><span class="line">• BODY 一个 JSON 格式的请求主体（如果请求需要的话）</span><br><span class="line"></span><br><span class="line">## 例如：</span><br><span class="line">curl -XGET &apos;localhost:9200/_count?pretty&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&apos;</span><br><span class="line"></span><br><span class="line">## 可简写成：</span><br><span class="line">GET /_count</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="准实时（-near-real-time-）"><a href="#准实时（-near-real-time-）" class="headerlink" title="准实时（ near real-time ）"></a>准实时（ near real-time ）</h2><ul><li>elasticsearch 是基于 lucene 的，lucene 是可以做到实时的，就是创建索引之后，立即能查询到。</li><li>但是这样，要么是牺牲索引的效率，每次都索引之后都刷新，要么就是牺牲查询的效率每次查询之前都进行刷新。</li><li>无论哪一种，都会让你的性能下降10倍以上，所以只能采取一种折中的方案，每隔n秒自动刷新，这样你创建索引之后，最多在ns之内肯定能查到。</li><li>这就是所谓的准实时(near real-time)查询。</li></ul><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">Elasticsearch: 权威指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Elasticsearch-是什么&quot;&gt;&lt;a href=&quot;#Elasticsearch-是什么&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 是什么&quot;&gt;&lt;/a&gt;Elasticsearch 是什么&lt;/h2&gt;&lt;h4 id=&quot;Elast
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【Elasticsearch】0.Elasticsearch 学习大纲</title>
    <link href="http://blog.shaib.cn/2018/05/11/Elasticsearch/0.Elasticsearch%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    <id>http://blog.shaib.cn/2018/05/11/Elasticsearch/0.Elasticsearch学习大纲/</id>
    <published>2018-05-11T08:54:40.671Z</published>
    <updated>2018-05-11T09:31:38.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch学习大纲"><a href="#Elasticsearch学习大纲" class="headerlink" title="Elasticsearch学习大纲"></a>Elasticsearch学习大纲</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>Elasticsearch 版本：6.2.3</li><li>系统：CentOS 7.4 x64</li><li>JDK 版本：JDK 1.8.0_131</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="../1.Elasticsearch基础知识">1.Elasticsearch 基础知识</a></li><li><a href="../2.Elasticsearch安装部署">2.Elasticsearch 安装配置和使用</a></li><li><a href="../3.0X-Pack安装和使用">3.X-Pack 安装配置和使用</a><ul><li><a href="../3.1Kibana安装配置和使用">3.1Kibana安装配置和使用</a></li><li><a href="../3.2logstash安装配置和使用">3.2logstash安装配置和使用</a></li></ul></li><li><a href="../4.索引管理、文档操作">4.索引管理、文档操作</a></li><li><a href="../5.批量操作">5.批量操作</a></li><li><a href="../6.IK-analyzer教程">6.IK analyzer 教程（自定义分词、停用词管理）</a></li><li><a href="../7.0全文检索">7.全文检索</a><ul><li><a href="../7.1JavaHighLevelRESTClient客户端">7.1Java High Level REST Client 客户端</a></li><li><a href="../7.2自动补全、纠错、拼音搜索">7.2自动补全、纠错、拼音搜索</a></li></ul></li><li><a href="../8.聚合">8.聚合</a></li><li><a href="../9.深度分页">9.深度分页</a></li><li><a href="../10.多表Join（6.x新类型）">10.多表 Join（6.x 新特性）</a></li><li><a href="../11.线上部署优化">11.线上部署优化</a></li><li><a href="../12.集群监控">12.集群监控</a></li><li><a href="../13.性能测试（esrally安装和使用）">13.性能测试（esrally安装和使用）</a></li></ul><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/AJJj2Inia15ixxb3nYPr7Q" target="_blank" rel="noopener">Elasticsearch 6.X 新类型Join深入详解</a></li><li><a href="https://mp.weixin.qq.com/s/5iAimeVsELa5RPWr2a_nnA" target="_blank" rel="noopener">如何在elasticsearch里面使用深度分页功能</a></li><li><a href="https://elasticsearch.cn/article/561" target="_blank" rel="noopener">死磕 Elasticsearch 方法论</a></li><li><a href="https://blog.csdn.net/laoyang360/article/details/79632579" target="_blank" rel="noopener">Elasticsearch6.2.2 X-Pack部署及使用详解</a></li><li><a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">ElasticSearch 集群监控</a></li><li><a href="https://www.jianshu.com/p/5cb91ed22956" target="_blank" rel="noopener">Elasticsearch Java API的基本使用</a></li><li><a href="http://www.youmeek.com/tag/elasticsearch/" target="_blank" rel="noopener">YouMeek-Elasticsearch-5.2.0-教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elasticsearch学习大纲&quot;&gt;&lt;a href=&quot;#Elasticsearch学习大纲&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch学习大纲&quot;&gt;&lt;/a&gt;Elasticsearch学习大纲&lt;/h1&gt;&lt;h2 id=&quot;开发环境&quot;
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.shaib.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>【FastDFS】2.FastDFS 与 SpringBoot 集成</title>
    <link href="http://blog.shaib.cn/2018/05/10/FastDFS/%E3%80%90FastDFS%E3%80%912.FastDFS%E4%B8%8ESpringBoot%E9%9B%86%E6%88%90/"/>
    <id>http://blog.shaib.cn/2018/05/10/FastDFS/【FastDFS】2.FastDFS与SpringBoot集成/</id>
    <published>2018-05-10T12:35:05.261Z</published>
    <updated>2018-05-11T04:02:29.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h1><p><a href="https://github.com/ligohan/springboot-fastdfs-demo" target="_blank" rel="noopener">https://github.com/ligohan/springboot-fastdfs-demo</a></p><h1 id="整合到-SpringBoot-项目流程"><a href="#整合到-SpringBoot-项目流程" class="headerlink" title="整合到 SpringBoot 项目流程"></a>整合到 SpringBoot 项目流程</h1><h2 id="添加-pom-依赖"><a href="#添加-pom-依赖" class="headerlink" title="添加 pom 依赖"></a>添加 pom 依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.tobato&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.26.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="将-Fdfs-配置引入项目"><a href="#将-Fdfs-配置引入项目" class="headerlink" title="将 Fdfs 配置引入项目"></a>将 Fdfs 配置引入项目</h2><ul><li>将注解配置加在springboot的入口类中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">@Import(FdfsClientConfig.class)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">// 解决 jmx 重复注册 bean 的问题</span><br><span class="line">@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)</span><br><span class="line">public class JingtongApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(JingtongApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="在spring配置文件中加入fdfs相关配置"><a href="#在spring配置文件中加入fdfs相关配置" class="headerlink" title="在spring配置文件中加入fdfs相关配置"></a>在spring配置文件中加入fdfs相关配置</h2><ul><li>根据项目当中使用配置文件类型（.yml和.properties选择其中一个），加入相应的配置。<h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fdfs:</span><br><span class="line">  soTimeout: 1500</span><br><span class="line">  connectTimeout: 600</span><br><span class="line">  thumbImage:             #缩略图生成参数</span><br><span class="line">    width: 150</span><br><span class="line">    height: 150</span><br><span class="line">  trackerList:            #TrackerList参数,支持多个</span><br><span class="line">    - 192.168.0.201:22122</span><br><span class="line">    - 192.168.0.202:22122</span><br></pre></td></tr></table></figure></li></ul><h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fdfs.soTimeout=1500</span><br><span class="line">fdfs.connectTimeout=600</span><br><span class="line">fdfs.thumbImage.width=150</span><br><span class="line">fdfs.thumbImage.height=150</span><br><span class="line">fdfs.trackerList[0]=192.168.0.201:22122</span><br><span class="line">fdfs.trackerList[1]=192.168.0.202:22122</span><br></pre></td></tr></table></figure><h4 id="文件上传下载工具类"><a href="#文件上传下载工具类" class="headerlink" title="文件上传下载工具类"></a>文件上传下载工具类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.gitnavi.springboot.springbootsimpledemo.util;</span><br><span class="line"></span><br><span class="line">import com.github.tobato.fastdfs.domain.StorePath;</span><br><span class="line">import com.github.tobato.fastdfs.exception.FdfsUnsupportStorePathException;</span><br><span class="line">import com.github.tobato.fastdfs.service.FastFileStorageClient;</span><br><span class="line">import com.gitnavi.springboot.springbootsimpledemo.common.FastDFSConstants;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.apache.commons.io.FilenameUtils;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Description: FastDFS文件上传下载包装类</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@Log4j2</span><br><span class="line">public class FastDFSClientWrapper &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传文件</span><br><span class="line">     * @param file 文件对象</span><br><span class="line">     * @return 文件访问地址</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public String uploadFile(MultipartFile file) throws IOException &#123;</span><br><span class="line">        StorePath storePath = storageClient.uploadFile(file.getInputStream(),file.getSize(), FilenameUtils.getExtension(file.getOriginalFilename()),null);</span><br><span class="line">        return getResAccessUrl(storePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将一段字符串生成一个文件上传</span><br><span class="line">     * @param content 文件内容</span><br><span class="line">     * @param fileExtension</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String uploadFile(String content, String fileExtension) &#123;</span><br><span class="line">        byte[] buff = content.getBytes(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">        ByteArrayInputStream stream = new ByteArrayInputStream(buff);</span><br><span class="line">        StorePath storePath = storageClient.uploadFile(stream,buff.length, fileExtension,null);</span><br><span class="line">        return getResAccessUrl(storePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 封装图片完整URL地址</span><br><span class="line">    private String getResAccessUrl(StorePath storePath) &#123;</span><br><span class="line">        String fileUrl = FastDFSConstants.HTTP_PRODOCOL + &quot;://&quot; + FastDFSConstants.RES_HOST + &quot;/&quot; + storePath.getFullPath();</span><br><span class="line">        return fileUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除文件</span><br><span class="line">     * @param fileUrl 文件访问地址</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public void deleteFile(String fileUrl) &#123;</span><br><span class="line">        if (StringUtils.isEmpty(fileUrl)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            StorePath storePath = StorePath.praseFromUrl(fileUrl);</span><br><span class="line">            storageClient.deleteFile(storePath.getGroup(), storePath.getPath());</span><br><span class="line">        &#125; catch (FdfsUnsupportStorePathException e) &#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 除了FastDFSClientWrapper类中用到的api，客户端提供的api还有很多，可根据自身的业务需求，将其它接口也添加到工具类中即可。</span><br><span class="line">    // 上传文件，并添加文件元数据</span><br><span class="line">    //StorePath uploadFile(InputStream inputStream, long fileSize, String fileExtName, Set&lt;MateData&gt; metaDataSet);</span><br><span class="line">    // 获取文件元数据</span><br><span class="line">    //Set&lt;MateData&gt; getMetadata(String groupName, String path);</span><br><span class="line">    // 上传图片并同时生成一个缩略图</span><br><span class="line">    //StorePath uploadImageAndCrtThumbImage(InputStream inputStream, long fileSize, String fileExtName, Set&lt;MateData&gt; metaDataSet);</span><br><span class="line">    // 。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.gitnavi.springboot.springbootsimpledemo.controller;</span><br><span class="line"></span><br><span class="line">import com.gitnavi.springboot.springbootsimpledemo.util.FastDFSClientWrapper;</span><br><span class="line">import io.swagger.annotations.Api;</span><br><span class="line">import io.swagger.annotations.ApiImplicitParam;</span><br><span class="line">import io.swagger.annotations.ApiImplicitParams;</span><br><span class="line">import io.swagger.annotations.ApiOperation;</span><br><span class="line">import org.springframework.http.ResponseEntity;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Api(value = &quot;FastDFSController RESTful&quot;, description = &quot;上传文件 REST API&quot;)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/api/fastdfs&quot;)</span><br><span class="line">public class FastDFSController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private FastDFSClientWrapper dfsClient;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = &quot;上传文件&quot;, notes = &quot;上传文件&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name = &quot;file&quot;, value = &quot;文件本体&quot;, paramType = &quot;body&quot;),</span><br><span class="line">    &#125;)</span><br><span class="line">    @RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST)</span><br><span class="line">    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; upload(MultipartFile file, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        String fileUrl = dfsClient.uploadFile(file);</span><br><span class="line">        map.put(&quot;file_url&quot;, fileUrl);</span><br><span class="line">        return ResponseEntity.ok(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/11952792-02825f2e9cf951ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://blog.csdn.net/xyang81/article/details/52850667" target="_blank" rel="noopener">FastDFS 与 Springboot 集成</a></li><li><a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">github - tobato/FastDFS_Client</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DEMO&quot;&gt;&lt;a href=&quot;#DEMO&quot; class=&quot;headerlink&quot; title=&quot;DEMO&quot;&gt;&lt;/a&gt;DEMO&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ligohan/springboot-fastdfs-demo&quot; t
      
    
    </summary>
    
    
      <category term="FastDFS" scheme="http://blog.shaib.cn/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>【FastDFS】1.FastDFS 安装和部署</title>
    <link href="http://blog.shaib.cn/2018/05/10/FastDFS/%E3%80%90FastDFS%E3%80%911.FastDFS%E5%AE%89%E8%A3%85%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <id>http://blog.shaib.cn/2018/05/10/FastDFS/【FastDFS】1.FastDFS安装和部署/</id>
    <published>2018-05-10T06:07:36.285Z</published>
    <updated>2018-05-10T12:22:37.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ul><li>FastDFS 详细介绍：<a href="https://www.oschina.net/p/fastdfs" target="_blank" rel="noopener">https://www.oschina.net/p/fastdfs</a></li></ul><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>FastDFS 5.12</li><li>CentOS 6.7</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h4 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel -y</span><br></pre></td></tr></table></figure><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><table><thead><tr><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>所有安装包存放目录</td><td>/fastdfs</td></tr><tr><td>tracker 跟踪服务器数据</td><td>/fastdfs/tracker</td></tr><tr><td>storage 存储服务器数据</td><td>/fastdfs/storage</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /fastdfs</span><br><span class="line">mkdir -p /fastdfs/tracker</span><br><span class="line">mkdir -p /fastdfs/storage</span><br><span class="line"></span><br><span class="line"># 切换到安装目录准备下载安装包</span><br><span class="line"># 路径可自定义，注意下方命令需要对应修改</span><br><span class="line">cd /usr/workspace/fastdfs</span><br></pre></td></tr></table></figure><h2 id="安装-libfatscommon"><a href="#安装-libfatscommon" class="headerlink" title="安装 libfatscommon"></a>安装 libfatscommon</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/libfastcommon.git --depth 1</span><br><span class="line">cd libfastcommon/</span><br><span class="line">./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><h2 id="安装-FastDFS"><a href="#安装-FastDFS" class="headerlink" title="安装 FastDFS"></a>安装 FastDFS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/fastdfs.git --depth 1</span><br><span class="line">cd fastdfs/</span><br><span class="line">./make.sh &amp;&amp; ./make.sh install</span><br><span class="line">#配置文件准备</span><br><span class="line">cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br><span class="line">cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br><span class="line">cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf #客户端文件，测试用</span><br><span class="line">cp /usr/workspace/fastdfs/fastdfs/conf/http.conf /etc/fdfs/ #供 nginx 访问使用</span><br><span class="line">cp /usr/workspace/fastdfs/fastdfs/conf/mime.types /etc/fdfs/ #供 nginx 访问使用</span><br></pre></td></tr></table></figure><h2 id="安装-fastdfs-nginx-module"><a href="#安装-fastdfs-nginx-module" class="headerlink" title="安装 fastdfs-nginx-module"></a>安装 fastdfs-nginx-module</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1</span><br><span class="line">cp /usr/workspace/fastdfs/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.12.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.12.2.tar.gz</span><br><span class="line">cd nginx-1.12.2/</span><br><span class="line">#添加 fastdfs-nginx-module 模块</span><br><span class="line">./configure --add-module=/usr/workspace/fastdfs/fastdfs-nginx-module/src/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><h4 id="配置-tracker"><a href="#配置-tracker" class="headerlink" title="配置 tracker"></a>配置 tracker</h4><ol><li><p>创建目录，用于存放 store data 和 log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/workspace/fastdfs/tracker/data-and-log</span><br></pre></td></tr></table></figure></li><li><p>编辑 tracker 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"></span><br><span class="line"># 需要修改的内容如下</span><br><span class="line">## tracker 服务器端口（默认 22122, 一般不修改）</span><br><span class="line">port=22122</span><br><span class="line">## 存储日志和数据的根目录</span><br><span class="line">base_path=/usr/workspace/fastdfs/tracker/data-and-log</span><br></pre></td></tr></table></figure></li><li><p>保存后启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/fdfs_trackerd start # 启动 tracker 服务</span><br><span class="line">chkconfig fdfs_trackerd on # 自启动 tracker 服务</span><br><span class="line"></span><br><span class="line">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart # 重启 tracker 服务</span><br></pre></td></tr></table></figure></li><li><p>查看是否有 tracker 进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep tracker</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置-storage（存储节点）"><a href="#配置-storage（存储节点）" class="headerlink" title="配置 storage（存储节点）"></a>配置 storage（存储节点）</h4><ul><li>一般 storage 服务我们会单独装一台机子，但是这里为了方便我们安装在同一台。</li><li>如果 storage 单独安装的话，那上面安装的步骤都要在走一遍，只是到了编辑配置文件的时候，编辑的是 storage.conf 而已<h5 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h5></li></ul><ol><li><p>创建目录，用于存放 store data 和 log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/workspace/fastdfs/storage/data-and-log</span><br></pre></td></tr></table></figure></li><li><p>创建图片实际存放路径，可以设置多个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/workspace/fastdfs/storage/images-data0</span><br><span class="line">mkdir -p /usr/workspace/fastdfs/storage/images-data1</span><br></pre></td></tr></table></figure></li><li><p>编辑 storage 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"></span><br><span class="line"># 需要修改的内容如下</span><br><span class="line">port=23000  # storage 服务端口（默认 23000, 一般不修改）</span><br><span class="line">base_path=/usr/workspace/fastdfs/storage/data-and-log  # 数据和日志文件存储根目录</span><br><span class="line">## 第一个存储目录</span><br><span class="line">store_path0=/usr/workspace/fastdfs/storage/images-data0</span><br><span class="line">## 如果有多个，可以配置多行</span><br><span class="line">## store_path1=/usr/workspace/fastdfs/storage/images-data1</span><br><span class="line">## store_path2=/usr/workspace/fastdfs/storage/images-data2</span><br><span class="line">## tracker 服务器的 IP 和端口</span><br><span class="line">tracker_server=192.168.75.128:22122</span><br><span class="line">## http 访问文件的端口（默认 8888, 看情况修改, 和 nginx 中保持一致）</span><br><span class="line">http.server_port=8888</span><br></pre></td></tr></table></figure></li><li><p>保存后启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 启动 storage 服务，首次启动会很慢，因为它在创建预设存储文件的目录</span><br><span class="line">/etc/init.d/fdfs_storaged start</span><br><span class="line"># 自启动 storage 服务</span><br><span class="line">chkconfig fdfs_storaged on</span><br><span class="line"></span><br><span class="line"># 重启 storage 服务</span><br><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</span><br></pre></td></tr></table></figure></li><li><p>查看是否有 storage 进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep storage</span><br></pre></td></tr></table></figure></li></ol><h4 id="client-测试"><a href="#client-测试" class="headerlink" title="client 测试"></a>client 测试</h4><ol><li><p>创建存放 store log 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/workspace/fastdfs/fastdfs/client/data-and-log</span><br></pre></td></tr></table></figure></li><li><p>修改 client 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"></span><br><span class="line"># 需要修改的内容如下</span><br><span class="line">## 存储日志和数据的根目录</span><br><span class="line">base_path=/usr/workspace/fastdfs/fastdfs/client/data-and-log</span><br><span class="line">## tracker 服务器的 IP 和端口</span><br><span class="line">tracker_server=192.168.75.128:22122</span><br></pre></td></tr></table></figure></li><li><p>保存后测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 先使用 shell 上传一张测试图片 test.jpg</span><br><span class="line"># 运行测试</span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /usr/workspace/fastdfs/test/1.jpg</span><br><span class="line"></span><br><span class="line"># 返回以下 ID 即为成功</span><br><span class="line">group1/M00/00/00/wKhLgFryZoOATuwbAANbszC8Hfo381.jpg</span><br><span class="line"># 安装完 Nginx 后即可通过访问以下地址下载</span><br><span class="line">http://192.168.75.128/group1/M00/00/00/wKhLgFryZoOATuwbAANbszC8Hfo381.jpg</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h4><ol><li><p>创建保存 log 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/workspace/fastdfs/fastdfs-nginx-module/data-and-log</span><br></pre></td></tr></table></figure></li><li><p>编辑 Nginx 模块配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"></span><br><span class="line"># 需要修改的内容如下</span><br><span class="line">## tracker 服务器的 IP 和端口</span><br><span class="line">tracker_server=192.168.75.128:22122</span><br><span class="line">## log 存放目录</span><br><span class="line">base_path=/usr/workspace/fastdfs/fastdfs-nginx-module/data-and-log</span><br><span class="line">## 因为我们访问图片的地址是：http://192.168.1.114/group1/M00/00/00/wKgBclb0aqWAbVNrAAAjn7_h9gM813_big.jpg</span><br><span class="line">## 该地址前面是带有 /group1/M00，所以我们这里要使用 true，不然访问不到（原值是 false）</span><br><span class="line">url_have_group_name=true</span><br><span class="line">## 第一个存储目录</span><br><span class="line">store_path0=/usr/workspace/fastdfs/storage/images-data0</span><br><span class="line">## 如果有多个，可以配置多行</span><br><span class="line">## store_path1=/usr/workspace/fastdfs/storage/images-data1</span><br><span class="line">## store_path2=/usr/workspace/fastdfs/storage/images-data2</span><br></pre></td></tr></table></figure></li><li><p>编辑 Nginx 配置文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># 改为以下内容</span><br><span class="line">## 注意这一行，我特别加上了使用 root 用户去执行，不然有些日记目录没有权限访问</span><br><span class="line">user  root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;worker_connections  1024;&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        ## 访问本机</span><br><span class="line">        server_name  192.168.75.128;</span><br><span class="line">    </span><br><span class="line">        ## 拦截包含 /group1/M00 请求，使用 fastdfs 这个 Nginx 模块进行转发</span><br><span class="line">        location /group1/M00 &#123;ngx_fastdfs_module;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动 Nginx</li><li><p>停掉防火墙：<figure class="highlight plain"><figcaption><span>iptables stop```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 启动：```/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p></li><li><p>访问：<figure class="highlight plain"><figcaption><span>to nginx!```，即可表示安装成功</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 检查 时候有 Nginx 进程：```ps aux | grep nginx```，正常是显示 3 个结果出来</span><br><span class="line">- 刷新 Nginx 配置后重启：```/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></p></li><li><p>停止 Nginx：<figure class="highlight plain"><figcaption><span>-s stop```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 如果访问不了，或是出现其他信息看下错误立即：```vim /var/log/nginx/error.log</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>测试下载</p><ul><li>用外部浏览器访问刚才已传过的 nginx 安装包, 引用返回的 ID<br><a href="http://192.168.75.128/group1/M00/00/00/wKhLgFryZoOATuwbAANbszC8Hfo381.jpg" target="_blank" rel="noopener">http://192.168.75.128/group1/M00/00/00/wKhLgFryZoOATuwbAANbszC8Hfo381.jpg</a></li><li>弹出下载单机部署全部跑通，否则首先检查防火墙，再检查其他配置。</li></ul></li></ol><h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p><a href="https://www.cnblogs.com/cnmenglang/p/6731209.html" target="_blank" rel="noopener">https://www.cnblogs.com/cnmenglang/p/6731209.html</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/markdown-file/FastDFS-Install-And-Settings.md" target="_blank" rel="noopener">github - judasn/Linux-Tutorial/FastDFS-Install-And-Settings</a></li><li><a href="https://github.com/happyfish100/fastdfs/wiki" target="_blank" rel="noopener">官方 GitHub Wiki</a></li><li><a href="https://blog.csdn.net/zhu_tianwei/article/details/46045641" target="_blank" rel="noopener">FastDFS 之集群部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;FastDFS 详细介绍：&lt;a href=&quot;https://www.oschina.net/p/fastdfs&quot; tar
      
    
    </summary>
    
    
      <category term="FastDFS" scheme="http://blog.shaib.cn/tags/FastDFS/"/>
    
  </entry>
  
</feed>
